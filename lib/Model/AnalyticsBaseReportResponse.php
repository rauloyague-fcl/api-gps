<?php
/**
 * AnalyticsBaseReportResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnalyticsBaseReportResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsBaseReportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsBaseReportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'title' => 'string',
        'owner' => '\Swagger\Client\Model\IdNameType',
        'user' => '\Swagger\Client\Model\IdName',
        'origin' => '\Swagger\Client\Model\IdNameType',
        'client' => '\Swagger\Client\Model\IdName',
        'task_id' => 'double',
        'date' => 'string',
        'completion_date' => 'string',
        'status' => 'string',
        'progress' => 'double',
        'completed_tasks' => 'double',
        'total_tasks' => 'double',
        'first_pass_complete' => 'bool',
        'priority' => 'double',
        'mode' => 'string',
        'max_running' => 'double',
        'run_end_date' => 'string',
        'last_completed_date' => 'string',
        'dashboards' => '\Swagger\Client\Model\AnalyticsBaseReportDashboard[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'title' => null,
        'owner' => null,
        'user' => null,
        'origin' => null,
        'client' => null,
        'task_id' => 'double',
        'date' => null,
        'completion_date' => null,
        'status' => null,
        'progress' => 'double',
        'completed_tasks' => 'double',
        'total_tasks' => 'double',
        'first_pass_complete' => null,
        'priority' => 'double',
        'mode' => null,
        'max_running' => 'double',
        'run_end_date' => null,
        'last_completed_date' => null,
        'dashboards' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'title' => 'title',
        'owner' => 'owner',
        'user' => 'user',
        'origin' => 'origin',
        'client' => 'client',
        'task_id' => 'taskId',
        'date' => 'date',
        'completion_date' => 'completionDate',
        'status' => 'status',
        'progress' => 'progress',
        'completed_tasks' => 'completedTasks',
        'total_tasks' => 'totalTasks',
        'first_pass_complete' => 'firstPassComplete',
        'priority' => 'priority',
        'mode' => 'mode',
        'max_running' => 'maxRunning',
        'run_end_date' => 'runEndDate',
        'last_completed_date' => 'lastCompletedDate',
        'dashboards' => 'dashboards'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'title' => 'setTitle',
        'owner' => 'setOwner',
        'user' => 'setUser',
        'origin' => 'setOrigin',
        'client' => 'setClient',
        'task_id' => 'setTaskId',
        'date' => 'setDate',
        'completion_date' => 'setCompletionDate',
        'status' => 'setStatus',
        'progress' => 'setProgress',
        'completed_tasks' => 'setCompletedTasks',
        'total_tasks' => 'setTotalTasks',
        'first_pass_complete' => 'setFirstPassComplete',
        'priority' => 'setPriority',
        'mode' => 'setMode',
        'max_running' => 'setMaxRunning',
        'run_end_date' => 'setRunEndDate',
        'last_completed_date' => 'setLastCompletedDate',
        'dashboards' => 'setDashboards'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'title' => 'getTitle',
        'owner' => 'getOwner',
        'user' => 'getUser',
        'origin' => 'getOrigin',
        'client' => 'getClient',
        'task_id' => 'getTaskId',
        'date' => 'getDate',
        'completion_date' => 'getCompletionDate',
        'status' => 'getStatus',
        'progress' => 'getProgress',
        'completed_tasks' => 'getCompletedTasks',
        'total_tasks' => 'getTotalTasks',
        'first_pass_complete' => 'getFirstPassComplete',
        'priority' => 'getPriority',
        'mode' => 'getMode',
        'max_running' => 'getMaxRunning',
        'run_end_date' => 'getRunEndDate',
        'last_completed_date' => 'getLastCompletedDate',
        'dashboards' => 'getDashboards'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_QUEUED = 'queued';
    const STATUS_RUNNING = 'running';
    const STATUS_COMPLETED = 'completed';
    const STATUS_ABORTED = 'aborted';
    const STATUS_FAILED = 'failed';
    const STATUS_RETRY = 'retry';
    const MODE_SINGLE = 'single';
    const MODE_REPEAT = 'repeat';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_RUNNING,
            self::STATUS_COMPLETED,
            self::STATUS_ABORTED,
            self::STATUS_FAILED,
            self::STATUS_RETRY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_SINGLE,
            self::MODE_REPEAT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['completion_date'] = isset($data['completion_date']) ? $data['completion_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['completed_tasks'] = isset($data['completed_tasks']) ? $data['completed_tasks'] : null;
        $this->container['total_tasks'] = isset($data['total_tasks']) ? $data['total_tasks'] : null;
        $this->container['first_pass_complete'] = isset($data['first_pass_complete']) ? $data['first_pass_complete'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['max_running'] = isset($data['max_running']) ? $data['max_running'] : null;
        $this->container['run_end_date'] = isset($data['run_end_date']) ? $data['run_end_date'] : null;
        $this->container['last_completed_date'] = isset($data['last_completed_date']) ? $data['last_completed_date'] : null;
        $this->container['dashboards'] = isset($data['dashboards']) ? $data['dashboards'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ($this->container['task_id'] === null) {
            $invalidProperties[] = "'task_id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['completion_date'] === null) {
            $invalidProperties[] = "'completion_date' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['completed_tasks'] === null) {
            $invalidProperties[] = "'completed_tasks' can't be null";
        }
        if ($this->container['total_tasks'] === null) {
            $invalidProperties[] = "'total_tasks' can't be null";
        }
        if ($this->container['first_pass_complete'] === null) {
            $invalidProperties[] = "'first_pass_complete' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['max_running'] === null) {
            $invalidProperties[] = "'max_running' can't be null";
        }
        if ($this->container['run_end_date'] === null) {
            $invalidProperties[] = "'run_end_date' can't be null";
        }
        if ($this->container['last_completed_date'] === null) {
            $invalidProperties[] = "'last_completed_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\IdNameType $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\IdName $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Swagger\Client\Model\IdNameType $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Swagger\Client\Model\IdName $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return double
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param double $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets completion_date
     *
     * @return string
     */
    public function getCompletionDate()
    {
        return $this->container['completion_date'];
    }

    /**
     * Sets completion_date
     *
     * @param string $completion_date completion_date
     *
     * @return $this
     */
    public function setCompletionDate($completion_date)
    {
        $this->container['completion_date'] = $completion_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return double
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param double $progress progress
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets completed_tasks
     *
     * @return double
     */
    public function getCompletedTasks()
    {
        return $this->container['completed_tasks'];
    }

    /**
     * Sets completed_tasks
     *
     * @param double $completed_tasks completed_tasks
     *
     * @return $this
     */
    public function setCompletedTasks($completed_tasks)
    {
        $this->container['completed_tasks'] = $completed_tasks;

        return $this;
    }

    /**
     * Gets total_tasks
     *
     * @return double
     */
    public function getTotalTasks()
    {
        return $this->container['total_tasks'];
    }

    /**
     * Sets total_tasks
     *
     * @param double $total_tasks total_tasks
     *
     * @return $this
     */
    public function setTotalTasks($total_tasks)
    {
        $this->container['total_tasks'] = $total_tasks;

        return $this;
    }

    /**
     * Gets first_pass_complete
     *
     * @return bool
     */
    public function getFirstPassComplete()
    {
        return $this->container['first_pass_complete'];
    }

    /**
     * Sets first_pass_complete
     *
     * @param bool $first_pass_complete first_pass_complete
     *
     * @return $this
     */
    public function setFirstPassComplete($first_pass_complete)
    {
        $this->container['first_pass_complete'] = $first_pass_complete;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return double
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param double $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets max_running
     *
     * @return double
     */
    public function getMaxRunning()
    {
        return $this->container['max_running'];
    }

    /**
     * Sets max_running
     *
     * @param double $max_running max_running
     *
     * @return $this
     */
    public function setMaxRunning($max_running)
    {
        $this->container['max_running'] = $max_running;

        return $this;
    }

    /**
     * Gets run_end_date
     *
     * @return string
     */
    public function getRunEndDate()
    {
        return $this->container['run_end_date'];
    }

    /**
     * Sets run_end_date
     *
     * @param string $run_end_date run_end_date
     *
     * @return $this
     */
    public function setRunEndDate($run_end_date)
    {
        $this->container['run_end_date'] = $run_end_date;

        return $this;
    }

    /**
     * Gets last_completed_date
     *
     * @return string
     */
    public function getLastCompletedDate()
    {
        return $this->container['last_completed_date'];
    }

    /**
     * Sets last_completed_date
     *
     * @param string $last_completed_date last_completed_date
     *
     * @return $this
     */
    public function setLastCompletedDate($last_completed_date)
    {
        $this->container['last_completed_date'] = $last_completed_date;

        return $this;
    }

    /**
     * Gets dashboards
     *
     * @return \Swagger\Client\Model\AnalyticsBaseReportDashboard[]
     */
    public function getDashboards()
    {
        return $this->container['dashboards'];
    }

    /**
     * Sets dashboards
     *
     * @param \Swagger\Client\Model\AnalyticsBaseReportDashboard[] $dashboards dashboards
     *
     * @return $this
     */
    public function setDashboards($dashboards)
    {
        $this->container['dashboards'] = $dashboards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


