<?php
/**
 * AnalyticsDimension
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnalyticsDimension Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsDimension implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsDimension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dim' => 'string',
        'level' => 'double',
        'filter' => 'string[]',
        'levels' => '\Swagger\Client\Model\AnalyticsLevels'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dim' => null,
        'level' => 'double',
        'filter' => null,
        'levels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dim' => 'dim',
        'level' => 'level',
        'filter' => 'filter',
        'levels' => 'levels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dim' => 'setDim',
        'level' => 'setLevel',
        'filter' => 'setFilter',
        'levels' => 'setLevels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dim' => 'getDim',
        'level' => 'getLevel',
        'filter' => 'getFilter',
        'levels' => 'getLevels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIM_TIME = 'time';
    const DIM_ASSET = 'asset';
    const DIM_COST_CENTRE = 'costCentre';
    const DIM_ZONE_COST_CENTRE = 'zoneCostCentre';
    const DIM_ASSET_GROUP = 'assetGroup';
    const DIM_ZONE_GROUP = 'zoneGroup';
    const DIM_DEVICE = 'device';
    const DIM_IO_TYPE = 'ioType';
    const DIM_ALERT = 'alert';
    const DIM_EVENT = 'event';
    const DIM_ASSET_STATE = 'assetState';
    const DIM_ASSET_CATEGORY0 = 'assetCategory0';
    const DIM_ASSET_CATEGORY1 = 'assetCategory1';
    const DIM_ASSET_CATEGORY2 = 'assetCategory2';
    const DIM_ASSET_CATEGORY3 = 'assetCategory3';
    const DIM_ASSET_CATEGORY4 = 'assetCategory4';
    const DIM_OVERSPEED = 'overspeed';
    const DIM_SHIFT = 'shift';
    const DIM_COMPANY = 'company';
    const DIM_GEOGRAPHY = 'geography';
    const DIM_DEVICE_TYPE = 'deviceType';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDimAllowableValues()
    {
        return [
            self::DIM_TIME,
            self::DIM_ASSET,
            self::DIM_COST_CENTRE,
            self::DIM_ZONE_COST_CENTRE,
            self::DIM_ASSET_GROUP,
            self::DIM_ZONE_GROUP,
            self::DIM_DEVICE,
            self::DIM_IO_TYPE,
            self::DIM_ALERT,
            self::DIM_EVENT,
            self::DIM_ASSET_STATE,
            self::DIM_ASSET_CATEGORY0,
            self::DIM_ASSET_CATEGORY1,
            self::DIM_ASSET_CATEGORY2,
            self::DIM_ASSET_CATEGORY3,
            self::DIM_ASSET_CATEGORY4,
            self::DIM_OVERSPEED,
            self::DIM_SHIFT,
            self::DIM_COMPANY,
            self::DIM_GEOGRAPHY,
            self::DIM_DEVICE_TYPE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dim'] = isset($data['dim']) ? $data['dim'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['levels'] = isset($data['levels']) ? $data['levels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['dim'] === null) {
            $invalidProperties[] = "'dim' can't be null";
        }
        $allowedValues = $this->getDimAllowableValues();
        if (!is_null($this->container['dim']) && !in_array($this->container['dim'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dim', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['level'] === null) {
            $invalidProperties[] = "'level' can't be null";
        }
        if ($this->container['filter'] === null) {
            $invalidProperties[] = "'filter' can't be null";
        }
        if ($this->container['levels'] === null) {
            $invalidProperties[] = "'levels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dim
     *
     * @return string
     */
    public function getDim()
    {
        return $this->container['dim'];
    }

    /**
     * Sets dim
     *
     * @param string $dim dim
     *
     * @return $this
     */
    public function setDim($dim)
    {
        $allowedValues = $this->getDimAllowableValues();
        if (!in_array($dim, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dim', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dim'] = $dim;

        return $this;
    }

    /**
     * Gets level
     *
     * @return double
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param double $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string[]
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string[] $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets levels
     *
     * @return \Swagger\Client\Model\AnalyticsLevels
     */
    public function getLevels()
    {
        return $this->container['levels'];
    }

    /**
     * Sets levels
     *
     * @param \Swagger\Client\Model\AnalyticsLevels $levels levels
     *
     * @return $this
     */
    public function setLevels($levels)
    {
        $this->container['levels'] = $levels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


