<?php
/**
 * AnalyticsOutputRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnalyticsOutputRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsOutputRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsOutputRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'row_level' => 'double',
        'group_level' => 'double',
        'time' => 'string',
        'flipped' => 'bool',
        'measures' => 'string[]',
        'sort' => '\Swagger\Client\Model\AnalyticsSortOptions',
        'row' => 'string',
        'group' => 'string',
        'filters' => '\Swagger\Client\Model\AnalyticsOutputFilters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'row_level' => 'double',
        'group_level' => 'double',
        'time' => null,
        'flipped' => null,
        'measures' => null,
        'sort' => null,
        'row' => null,
        'group' => null,
        'filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'row_level' => 'rowLevel',
        'group_level' => 'groupLevel',
        'time' => 'time',
        'flipped' => 'flipped',
        'measures' => 'measures',
        'sort' => 'sort',
        'row' => 'row',
        'group' => 'group',
        'filters' => 'filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'row_level' => 'setRowLevel',
        'group_level' => 'setGroupLevel',
        'time' => 'setTime',
        'flipped' => 'setFlipped',
        'measures' => 'setMeasures',
        'sort' => 'setSort',
        'row' => 'setRow',
        'group' => 'setGroup',
        'filters' => 'setFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'row_level' => 'getRowLevel',
        'group_level' => 'getGroupLevel',
        'time' => 'getTime',
        'flipped' => 'getFlipped',
        'measures' => 'getMeasures',
        'sort' => 'getSort',
        'row' => 'getRow',
        'group' => 'getGroup',
        'filters' => 'getFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROW_TIME = 'time';
    const ROW_ASSET = 'asset';
    const ROW_COST_CENTRE = 'costCentre';
    const ROW_ZONE_COST_CENTRE = 'zoneCostCentre';
    const ROW_ASSET_GROUP = 'assetGroup';
    const ROW_ZONE_GROUP = 'zoneGroup';
    const ROW_DEVICE = 'device';
    const ROW_IO_TYPE = 'ioType';
    const ROW_ALERT = 'alert';
    const ROW_EVENT = 'event';
    const ROW_ASSET_STATE = 'assetState';
    const ROW_ASSET_CATEGORY0 = 'assetCategory0';
    const ROW_ASSET_CATEGORY1 = 'assetCategory1';
    const ROW_ASSET_CATEGORY2 = 'assetCategory2';
    const ROW_ASSET_CATEGORY3 = 'assetCategory3';
    const ROW_ASSET_CATEGORY4 = 'assetCategory4';
    const ROW_OVERSPEED = 'overspeed';
    const ROW_SHIFT = 'shift';
    const ROW_COMPANY = 'company';
    const ROW_GEOGRAPHY = 'geography';
    const ROW_DEVICE_TYPE = 'deviceType';
    const GROUP_TIME = 'time';
    const GROUP_ASSET = 'asset';
    const GROUP_COST_CENTRE = 'costCentre';
    const GROUP_ZONE_COST_CENTRE = 'zoneCostCentre';
    const GROUP_ASSET_GROUP = 'assetGroup';
    const GROUP_ZONE_GROUP = 'zoneGroup';
    const GROUP_DEVICE = 'device';
    const GROUP_IO_TYPE = 'ioType';
    const GROUP_ALERT = 'alert';
    const GROUP_EVENT = 'event';
    const GROUP_ASSET_STATE = 'assetState';
    const GROUP_ASSET_CATEGORY0 = 'assetCategory0';
    const GROUP_ASSET_CATEGORY1 = 'assetCategory1';
    const GROUP_ASSET_CATEGORY2 = 'assetCategory2';
    const GROUP_ASSET_CATEGORY3 = 'assetCategory3';
    const GROUP_ASSET_CATEGORY4 = 'assetCategory4';
    const GROUP_OVERSPEED = 'overspeed';
    const GROUP_SHIFT = 'shift';
    const GROUP_COMPANY = 'company';
    const GROUP_GEOGRAPHY = 'geography';
    const GROUP_DEVICE_TYPE = 'deviceType';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRowAllowableValues()
    {
        return [
            self::ROW_TIME,
            self::ROW_ASSET,
            self::ROW_COST_CENTRE,
            self::ROW_ZONE_COST_CENTRE,
            self::ROW_ASSET_GROUP,
            self::ROW_ZONE_GROUP,
            self::ROW_DEVICE,
            self::ROW_IO_TYPE,
            self::ROW_ALERT,
            self::ROW_EVENT,
            self::ROW_ASSET_STATE,
            self::ROW_ASSET_CATEGORY0,
            self::ROW_ASSET_CATEGORY1,
            self::ROW_ASSET_CATEGORY2,
            self::ROW_ASSET_CATEGORY3,
            self::ROW_ASSET_CATEGORY4,
            self::ROW_OVERSPEED,
            self::ROW_SHIFT,
            self::ROW_COMPANY,
            self::ROW_GEOGRAPHY,
            self::ROW_DEVICE_TYPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupAllowableValues()
    {
        return [
            self::GROUP_TIME,
            self::GROUP_ASSET,
            self::GROUP_COST_CENTRE,
            self::GROUP_ZONE_COST_CENTRE,
            self::GROUP_ASSET_GROUP,
            self::GROUP_ZONE_GROUP,
            self::GROUP_DEVICE,
            self::GROUP_IO_TYPE,
            self::GROUP_ALERT,
            self::GROUP_EVENT,
            self::GROUP_ASSET_STATE,
            self::GROUP_ASSET_CATEGORY0,
            self::GROUP_ASSET_CATEGORY1,
            self::GROUP_ASSET_CATEGORY2,
            self::GROUP_ASSET_CATEGORY3,
            self::GROUP_ASSET_CATEGORY4,
            self::GROUP_OVERSPEED,
            self::GROUP_SHIFT,
            self::GROUP_COMPANY,
            self::GROUP_GEOGRAPHY,
            self::GROUP_DEVICE_TYPE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['row_level'] = isset($data['row_level']) ? $data['row_level'] : null;
        $this->container['group_level'] = isset($data['group_level']) ? $data['group_level'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['flipped'] = isset($data['flipped']) ? $data['flipped'] : null;
        $this->container['measures'] = isset($data['measures']) ? $data['measures'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['row'] = isset($data['row']) ? $data['row'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['row_level'] === null) {
            $invalidProperties[] = "'row_level' can't be null";
        }
        if ($this->container['group_level'] === null) {
            $invalidProperties[] = "'group_level' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['flipped'] === null) {
            $invalidProperties[] = "'flipped' can't be null";
        }
        if ($this->container['measures'] === null) {
            $invalidProperties[] = "'measures' can't be null";
        }
        if ($this->container['sort'] === null) {
            $invalidProperties[] = "'sort' can't be null";
        }
        $allowedValues = $this->getRowAllowableValues();
        if (!is_null($this->container['row']) && !in_array($this->container['row'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'row', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGroupAllowableValues();
        if (!is_null($this->container['group']) && !in_array($this->container['group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'group', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets row_level
     *
     * @return double
     */
    public function getRowLevel()
    {
        return $this->container['row_level'];
    }

    /**
     * Sets row_level
     *
     * @param double $row_level row_level
     *
     * @return $this
     */
    public function setRowLevel($row_level)
    {
        $this->container['row_level'] = $row_level;

        return $this;
    }

    /**
     * Gets group_level
     *
     * @return double
     */
    public function getGroupLevel()
    {
        return $this->container['group_level'];
    }

    /**
     * Sets group_level
     *
     * @param double $group_level group_level
     *
     * @return $this
     */
    public function setGroupLevel($group_level)
    {
        $this->container['group_level'] = $group_level;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets flipped
     *
     * @return bool
     */
    public function getFlipped()
    {
        return $this->container['flipped'];
    }

    /**
     * Sets flipped
     *
     * @param bool $flipped flipped
     *
     * @return $this
     */
    public function setFlipped($flipped)
    {
        $this->container['flipped'] = $flipped;

        return $this;
    }

    /**
     * Gets measures
     *
     * @return string[]
     */
    public function getMeasures()
    {
        return $this->container['measures'];
    }

    /**
     * Sets measures
     *
     * @param string[] $measures measures
     *
     * @return $this
     */
    public function setMeasures($measures)
    {
        $this->container['measures'] = $measures;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \Swagger\Client\Model\AnalyticsSortOptions
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \Swagger\Client\Model\AnalyticsSortOptions $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets row
     *
     * @return string
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     *
     * @param string $row row
     *
     * @return $this
     */
    public function setRow($row)
    {
        $allowedValues = $this->getRowAllowableValues();
        if (!is_null($row) && !in_array($row, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'row', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['row'] = $row;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $allowedValues = $this->getGroupAllowableValues();
        if (!is_null($group) && !in_array($group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'group', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\AnalyticsOutputFilters
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\AnalyticsOutputFilters $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


