<?php
/**
 * AnalyticsOutputSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnalyticsOutputSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsOutputSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsOutputSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'date_range' => 'string',
        'row' => '\Swagger\Client\Model\AnalyticsDimension',
        'group' => '\Swagger\Client\Model\AnalyticsDimension',
        'flipped' => 'bool',
        'measures' => '\Swagger\Client\Model\MeasureDescription[]',
        'table' => '\Swagger\Client\Model\AnalyticsTable',
        'sort' => '\Swagger\Client\Model\AnalyticsSortOptions',
        'graph' => '\Swagger\Client\Model\ChartOptions',
        'pie' => '\Swagger\Client\Model\PieChartOptions',
        'stat' => '\Swagger\Client\Model\StatChartOptions',
        'calculated_measures' => '\Swagger\Client\Model\CalculatedMeasureSettings',
        'filters' => '\Swagger\Client\Model\AnalyticsOutputFilters',
        'time_options' => 'string[]',
        'shifts_enabled' => 'bool',
        'do_not_template' => 'bool',
        'updates' => '\Swagger\Client\Model\AnalyticsUpdateSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'date_range' => null,
        'row' => null,
        'group' => null,
        'flipped' => null,
        'measures' => null,
        'table' => null,
        'sort' => null,
        'graph' => null,
        'pie' => null,
        'stat' => null,
        'calculated_measures' => null,
        'filters' => null,
        'time_options' => null,
        'shifts_enabled' => null,
        'do_not_template' => null,
        'updates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'date_range' => 'dateRange',
        'row' => 'row',
        'group' => 'group',
        'flipped' => 'flipped',
        'measures' => 'measures',
        'table' => 'table',
        'sort' => 'sort',
        'graph' => 'graph',
        'pie' => 'pie',
        'stat' => 'stat',
        'calculated_measures' => 'calculatedMeasures',
        'filters' => 'filters',
        'time_options' => 'timeOptions',
        'shifts_enabled' => 'shiftsEnabled',
        'do_not_template' => 'doNotTemplate',
        'updates' => 'updates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'date_range' => 'setDateRange',
        'row' => 'setRow',
        'group' => 'setGroup',
        'flipped' => 'setFlipped',
        'measures' => 'setMeasures',
        'table' => 'setTable',
        'sort' => 'setSort',
        'graph' => 'setGraph',
        'pie' => 'setPie',
        'stat' => 'setStat',
        'calculated_measures' => 'setCalculatedMeasures',
        'filters' => 'setFilters',
        'time_options' => 'setTimeOptions',
        'shifts_enabled' => 'setShiftsEnabled',
        'do_not_template' => 'setDoNotTemplate',
        'updates' => 'setUpdates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'date_range' => 'getDateRange',
        'row' => 'getRow',
        'group' => 'getGroup',
        'flipped' => 'getFlipped',
        'measures' => 'getMeasures',
        'table' => 'getTable',
        'sort' => 'getSort',
        'graph' => 'getGraph',
        'pie' => 'getPie',
        'stat' => 'getStat',
        'calculated_measures' => 'getCalculatedMeasures',
        'filters' => 'getFilters',
        'time_options' => 'getTimeOptions',
        'shifts_enabled' => 'getShiftsEnabled',
        'do_not_template' => 'getDoNotTemplate',
        'updates' => 'getUpdates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIME_OPTIONS_DAYS = 'days';
    const TIME_OPTIONS_HOURS = 'hours';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeOptionsAllowableValues()
    {
        return [
            self::TIME_OPTIONS_DAYS,
            self::TIME_OPTIONS_HOURS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date_range'] = isset($data['date_range']) ? $data['date_range'] : null;
        $this->container['row'] = isset($data['row']) ? $data['row'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['flipped'] = isset($data['flipped']) ? $data['flipped'] : null;
        $this->container['measures'] = isset($data['measures']) ? $data['measures'] : null;
        $this->container['table'] = isset($data['table']) ? $data['table'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['graph'] = isset($data['graph']) ? $data['graph'] : null;
        $this->container['pie'] = isset($data['pie']) ? $data['pie'] : null;
        $this->container['stat'] = isset($data['stat']) ? $data['stat'] : null;
        $this->container['calculated_measures'] = isset($data['calculated_measures']) ? $data['calculated_measures'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['time_options'] = isset($data['time_options']) ? $data['time_options'] : null;
        $this->container['shifts_enabled'] = isset($data['shifts_enabled']) ? $data['shifts_enabled'] : null;
        $this->container['do_not_template'] = isset($data['do_not_template']) ? $data['do_not_template'] : null;
        $this->container['updates'] = isset($data['updates']) ? $data['updates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['date_range'] === null) {
            $invalidProperties[] = "'date_range' can't be null";
        }
        if ($this->container['row'] === null) {
            $invalidProperties[] = "'row' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['flipped'] === null) {
            $invalidProperties[] = "'flipped' can't be null";
        }
        if ($this->container['measures'] === null) {
            $invalidProperties[] = "'measures' can't be null";
        }
        if ($this->container['table'] === null) {
            $invalidProperties[] = "'table' can't be null";
        }
        if ($this->container['sort'] === null) {
            $invalidProperties[] = "'sort' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_range
     *
     * @return string
     */
    public function getDateRange()
    {
        return $this->container['date_range'];
    }

    /**
     * Sets date_range
     *
     * @param string $date_range date_range
     *
     * @return $this
     */
    public function setDateRange($date_range)
    {
        $this->container['date_range'] = $date_range;

        return $this;
    }

    /**
     * Gets row
     *
     * @return \Swagger\Client\Model\AnalyticsDimension
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     *
     * @param \Swagger\Client\Model\AnalyticsDimension $row row
     *
     * @return $this
     */
    public function setRow($row)
    {
        $this->container['row'] = $row;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Swagger\Client\Model\AnalyticsDimension
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Swagger\Client\Model\AnalyticsDimension $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets flipped
     *
     * @return bool
     */
    public function getFlipped()
    {
        return $this->container['flipped'];
    }

    /**
     * Sets flipped
     *
     * @param bool $flipped flipped
     *
     * @return $this
     */
    public function setFlipped($flipped)
    {
        $this->container['flipped'] = $flipped;

        return $this;
    }

    /**
     * Gets measures
     *
     * @return \Swagger\Client\Model\MeasureDescription[]
     */
    public function getMeasures()
    {
        return $this->container['measures'];
    }

    /**
     * Sets measures
     *
     * @param \Swagger\Client\Model\MeasureDescription[] $measures measures
     *
     * @return $this
     */
    public function setMeasures($measures)
    {
        $this->container['measures'] = $measures;

        return $this;
    }

    /**
     * Gets table
     *
     * @return \Swagger\Client\Model\AnalyticsTable
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param \Swagger\Client\Model\AnalyticsTable $table table
     *
     * @return $this
     */
    public function setTable($table)
    {
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \Swagger\Client\Model\AnalyticsSortOptions
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \Swagger\Client\Model\AnalyticsSortOptions $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets graph
     *
     * @return \Swagger\Client\Model\ChartOptions
     */
    public function getGraph()
    {
        return $this->container['graph'];
    }

    /**
     * Sets graph
     *
     * @param \Swagger\Client\Model\ChartOptions $graph graph
     *
     * @return $this
     */
    public function setGraph($graph)
    {
        $this->container['graph'] = $graph;

        return $this;
    }

    /**
     * Gets pie
     *
     * @return \Swagger\Client\Model\PieChartOptions
     */
    public function getPie()
    {
        return $this->container['pie'];
    }

    /**
     * Sets pie
     *
     * @param \Swagger\Client\Model\PieChartOptions $pie pie
     *
     * @return $this
     */
    public function setPie($pie)
    {
        $this->container['pie'] = $pie;

        return $this;
    }

    /**
     * Gets stat
     *
     * @return \Swagger\Client\Model\StatChartOptions
     */
    public function getStat()
    {
        return $this->container['stat'];
    }

    /**
     * Sets stat
     *
     * @param \Swagger\Client\Model\StatChartOptions $stat stat
     *
     * @return $this
     */
    public function setStat($stat)
    {
        $this->container['stat'] = $stat;

        return $this;
    }

    /**
     * Gets calculated_measures
     *
     * @return \Swagger\Client\Model\CalculatedMeasureSettings
     */
    public function getCalculatedMeasures()
    {
        return $this->container['calculated_measures'];
    }

    /**
     * Sets calculated_measures
     *
     * @param \Swagger\Client\Model\CalculatedMeasureSettings $calculated_measures calculated_measures
     *
     * @return $this
     */
    public function setCalculatedMeasures($calculated_measures)
    {
        $this->container['calculated_measures'] = $calculated_measures;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\AnalyticsOutputFilters
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\AnalyticsOutputFilters $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets time_options
     *
     * @return string[]
     */
    public function getTimeOptions()
    {
        return $this->container['time_options'];
    }

    /**
     * Sets time_options
     *
     * @param string[] $time_options time_options
     *
     * @return $this
     */
    public function setTimeOptions($time_options)
    {
        $allowedValues = $this->getTimeOptionsAllowableValues();
        if (!is_null($time_options) && array_diff($time_options, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_options'] = $time_options;

        return $this;
    }

    /**
     * Gets shifts_enabled
     *
     * @return bool
     */
    public function getShiftsEnabled()
    {
        return $this->container['shifts_enabled'];
    }

    /**
     * Sets shifts_enabled
     *
     * @param bool $shifts_enabled shifts_enabled
     *
     * @return $this
     */
    public function setShiftsEnabled($shifts_enabled)
    {
        $this->container['shifts_enabled'] = $shifts_enabled;

        return $this;
    }

    /**
     * Gets do_not_template
     *
     * @return bool
     */
    public function getDoNotTemplate()
    {
        return $this->container['do_not_template'];
    }

    /**
     * Sets do_not_template
     *
     * @param bool $do_not_template do_not_template
     *
     * @return $this
     */
    public function setDoNotTemplate($do_not_template)
    {
        $this->container['do_not_template'] = $do_not_template;

        return $this;
    }

    /**
     * Gets updates
     *
     * @return \Swagger\Client\Model\AnalyticsUpdateSettings
     */
    public function getUpdates()
    {
        return $this->container['updates'];
    }

    /**
     * Sets updates
     *
     * @param \Swagger\Client\Model\AnalyticsUpdateSettings $updates updates
     *
     * @return $this
     */
    public function setUpdates($updates)
    {
        $this->container['updates'] = $updates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


