<?php
/**
 * AssetAnalogParameter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AssetAnalogParameter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetAnalogParameter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssetAnalogParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'io_type' => 'string',
        'min_range' => 'double',
        'max_range' => 'double',
        'range_debounce' => 'double',
        'dec_value' => 'double',
        'inc_value' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'io_type' => null,
        'min_range' => 'double',
        'max_range' => 'double',
        'range_debounce' => 'double',
        'dec_value' => 'double',
        'inc_value' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'io_type' => 'ioType',
        'min_range' => 'minRange',
        'max_range' => 'maxRange',
        'range_debounce' => 'rangeDebounce',
        'dec_value' => 'decValue',
        'inc_value' => 'incValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'io_type' => 'setIoType',
        'min_range' => 'setMinRange',
        'max_range' => 'setMaxRange',
        'range_debounce' => 'setRangeDebounce',
        'dec_value' => 'setDecValue',
        'inc_value' => 'setIncValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'io_type' => 'getIoType',
        'min_range' => 'getMinRange',
        'max_range' => 'getMaxRange',
        'range_debounce' => 'getRangeDebounce',
        'dec_value' => 'getDecValue',
        'inc_value' => 'getIncValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['io_type'] = isset($data['io_type']) ? $data['io_type'] : null;
        $this->container['min_range'] = isset($data['min_range']) ? $data['min_range'] : null;
        $this->container['max_range'] = isset($data['max_range']) ? $data['max_range'] : null;
        $this->container['range_debounce'] = isset($data['range_debounce']) ? $data['range_debounce'] : null;
        $this->container['dec_value'] = isset($data['dec_value']) ? $data['dec_value'] : null;
        $this->container['inc_value'] = isset($data['inc_value']) ? $data['inc_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['io_type'] === null) {
            $invalidProperties[] = "'io_type' can't be null";
        }
        if ($this->container['min_range'] === null) {
            $invalidProperties[] = "'min_range' can't be null";
        }
        if ($this->container['max_range'] === null) {
            $invalidProperties[] = "'max_range' can't be null";
        }
        if ($this->container['range_debounce'] === null) {
            $invalidProperties[] = "'range_debounce' can't be null";
        }
        if ($this->container['dec_value'] === null) {
            $invalidProperties[] = "'dec_value' can't be null";
        }
        if ($this->container['inc_value'] === null) {
            $invalidProperties[] = "'inc_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets io_type
     *
     * @return string
     */
    public function getIoType()
    {
        return $this->container['io_type'];
    }

    /**
     * Sets io_type
     *
     * @param string $io_type io_type
     *
     * @return $this
     */
    public function setIoType($io_type)
    {
        $this->container['io_type'] = $io_type;

        return $this;
    }

    /**
     * Gets min_range
     *
     * @return double
     */
    public function getMinRange()
    {
        return $this->container['min_range'];
    }

    /**
     * Sets min_range
     *
     * @param double $min_range min_range
     *
     * @return $this
     */
    public function setMinRange($min_range)
    {
        $this->container['min_range'] = $min_range;

        return $this;
    }

    /**
     * Gets max_range
     *
     * @return double
     */
    public function getMaxRange()
    {
        return $this->container['max_range'];
    }

    /**
     * Sets max_range
     *
     * @param double $max_range max_range
     *
     * @return $this
     */
    public function setMaxRange($max_range)
    {
        $this->container['max_range'] = $max_range;

        return $this;
    }

    /**
     * Gets range_debounce
     *
     * @return double
     */
    public function getRangeDebounce()
    {
        return $this->container['range_debounce'];
    }

    /**
     * Sets range_debounce
     *
     * @param double $range_debounce range_debounce
     *
     * @return $this
     */
    public function setRangeDebounce($range_debounce)
    {
        $this->container['range_debounce'] = $range_debounce;

        return $this;
    }

    /**
     * Gets dec_value
     *
     * @return double
     */
    public function getDecValue()
    {
        return $this->container['dec_value'];
    }

    /**
     * Sets dec_value
     *
     * @param double $dec_value dec_value
     *
     * @return $this
     */
    public function setDecValue($dec_value)
    {
        $this->container['dec_value'] = $dec_value;

        return $this;
    }

    /**
     * Gets inc_value
     *
     * @return double
     */
    public function getIncValue()
    {
        return $this->container['inc_value'];
    }

    /**
     * Sets inc_value
     *
     * @param double $inc_value inc_value
     *
     * @return $this
     */
    public function setIncValue($inc_value)
    {
        $this->container['inc_value'] = $inc_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


