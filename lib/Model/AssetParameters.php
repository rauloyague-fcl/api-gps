<?php
/**
 * AssetParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AssetParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssetParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'overspeed' => 'double',
        'overspeed_tolerance' => 'double',
        'excessive_idle' => 'double',
        'borders' => 'string[]',
        'analogs' => '\Swagger\Client\Model\AssetAnalogParameter[]',
        'temperatures' => '\Swagger\Client\Model\AssetTemperatureParameter[]',
        'curfews' => '\Swagger\Client\Model\AssetCurfewParameter[]',
        'max_trip_time' => 'double',
        'max_trip_distance' => 'double',
        'max_inactive_time' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'overspeed' => 'double',
        'overspeed_tolerance' => 'double',
        'excessive_idle' => 'double',
        'borders' => null,
        'analogs' => null,
        'temperatures' => null,
        'curfews' => null,
        'max_trip_time' => 'double',
        'max_trip_distance' => 'double',
        'max_inactive_time' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overspeed' => 'overspeed',
        'overspeed_tolerance' => 'overspeedTolerance',
        'excessive_idle' => 'excessiveIdle',
        'borders' => 'borders',
        'analogs' => 'analogs',
        'temperatures' => 'temperatures',
        'curfews' => 'curfews',
        'max_trip_time' => 'maxTripTime',
        'max_trip_distance' => 'maxTripDistance',
        'max_inactive_time' => 'maxInactiveTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overspeed' => 'setOverspeed',
        'overspeed_tolerance' => 'setOverspeedTolerance',
        'excessive_idle' => 'setExcessiveIdle',
        'borders' => 'setBorders',
        'analogs' => 'setAnalogs',
        'temperatures' => 'setTemperatures',
        'curfews' => 'setCurfews',
        'max_trip_time' => 'setMaxTripTime',
        'max_trip_distance' => 'setMaxTripDistance',
        'max_inactive_time' => 'setMaxInactiveTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overspeed' => 'getOverspeed',
        'overspeed_tolerance' => 'getOverspeedTolerance',
        'excessive_idle' => 'getExcessiveIdle',
        'borders' => 'getBorders',
        'analogs' => 'getAnalogs',
        'temperatures' => 'getTemperatures',
        'curfews' => 'getCurfews',
        'max_trip_time' => 'getMaxTripTime',
        'max_trip_distance' => 'getMaxTripDistance',
        'max_inactive_time' => 'getMaxInactiveTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overspeed'] = isset($data['overspeed']) ? $data['overspeed'] : null;
        $this->container['overspeed_tolerance'] = isset($data['overspeed_tolerance']) ? $data['overspeed_tolerance'] : null;
        $this->container['excessive_idle'] = isset($data['excessive_idle']) ? $data['excessive_idle'] : null;
        $this->container['borders'] = isset($data['borders']) ? $data['borders'] : null;
        $this->container['analogs'] = isset($data['analogs']) ? $data['analogs'] : null;
        $this->container['temperatures'] = isset($data['temperatures']) ? $data['temperatures'] : null;
        $this->container['curfews'] = isset($data['curfews']) ? $data['curfews'] : null;
        $this->container['max_trip_time'] = isset($data['max_trip_time']) ? $data['max_trip_time'] : null;
        $this->container['max_trip_distance'] = isset($data['max_trip_distance']) ? $data['max_trip_distance'] : null;
        $this->container['max_inactive_time'] = isset($data['max_inactive_time']) ? $data['max_inactive_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overspeed
     *
     * @return double
     */
    public function getOverspeed()
    {
        return $this->container['overspeed'];
    }

    /**
     * Sets overspeed
     *
     * @param double $overspeed overspeed
     *
     * @return $this
     */
    public function setOverspeed($overspeed)
    {
        $this->container['overspeed'] = $overspeed;

        return $this;
    }

    /**
     * Gets overspeed_tolerance
     *
     * @return double
     */
    public function getOverspeedTolerance()
    {
        return $this->container['overspeed_tolerance'];
    }

    /**
     * Sets overspeed_tolerance
     *
     * @param double $overspeed_tolerance overspeed_tolerance
     *
     * @return $this
     */
    public function setOverspeedTolerance($overspeed_tolerance)
    {
        $this->container['overspeed_tolerance'] = $overspeed_tolerance;

        return $this;
    }

    /**
     * Gets excessive_idle
     *
     * @return double
     */
    public function getExcessiveIdle()
    {
        return $this->container['excessive_idle'];
    }

    /**
     * Sets excessive_idle
     *
     * @param double $excessive_idle excessive_idle
     *
     * @return $this
     */
    public function setExcessiveIdle($excessive_idle)
    {
        $this->container['excessive_idle'] = $excessive_idle;

        return $this;
    }

    /**
     * Gets borders
     *
     * @return string[]
     */
    public function getBorders()
    {
        return $this->container['borders'];
    }

    /**
     * Sets borders
     *
     * @param string[] $borders borders
     *
     * @return $this
     */
    public function setBorders($borders)
    {
        $this->container['borders'] = $borders;

        return $this;
    }

    /**
     * Gets analogs
     *
     * @return \Swagger\Client\Model\AssetAnalogParameter[]
     */
    public function getAnalogs()
    {
        return $this->container['analogs'];
    }

    /**
     * Sets analogs
     *
     * @param \Swagger\Client\Model\AssetAnalogParameter[] $analogs analogs
     *
     * @return $this
     */
    public function setAnalogs($analogs)
    {
        $this->container['analogs'] = $analogs;

        return $this;
    }

    /**
     * Gets temperatures
     *
     * @return \Swagger\Client\Model\AssetTemperatureParameter[]
     */
    public function getTemperatures()
    {
        return $this->container['temperatures'];
    }

    /**
     * Sets temperatures
     *
     * @param \Swagger\Client\Model\AssetTemperatureParameter[] $temperatures temperatures
     *
     * @return $this
     */
    public function setTemperatures($temperatures)
    {
        $this->container['temperatures'] = $temperatures;

        return $this;
    }

    /**
     * Gets curfews
     *
     * @return \Swagger\Client\Model\AssetCurfewParameter[]
     */
    public function getCurfews()
    {
        return $this->container['curfews'];
    }

    /**
     * Sets curfews
     *
     * @param \Swagger\Client\Model\AssetCurfewParameter[] $curfews curfews
     *
     * @return $this
     */
    public function setCurfews($curfews)
    {
        $this->container['curfews'] = $curfews;

        return $this;
    }

    /**
     * Gets max_trip_time
     *
     * @return double
     */
    public function getMaxTripTime()
    {
        return $this->container['max_trip_time'];
    }

    /**
     * Sets max_trip_time
     *
     * @param double $max_trip_time max_trip_time
     *
     * @return $this
     */
    public function setMaxTripTime($max_trip_time)
    {
        $this->container['max_trip_time'] = $max_trip_time;

        return $this;
    }

    /**
     * Gets max_trip_distance
     *
     * @return double
     */
    public function getMaxTripDistance()
    {
        return $this->container['max_trip_distance'];
    }

    /**
     * Sets max_trip_distance
     *
     * @param double $max_trip_distance max_trip_distance
     *
     * @return $this
     */
    public function setMaxTripDistance($max_trip_distance)
    {
        $this->container['max_trip_distance'] = $max_trip_distance;

        return $this;
    }

    /**
     * Gets max_inactive_time
     *
     * @return double
     */
    public function getMaxInactiveTime()
    {
        return $this->container['max_inactive_time'];
    }

    /**
     * Sets max_inactive_time
     *
     * @param double $max_inactive_time max_inactive_time
     *
     * @return $this
     */
    public function setMaxInactiveTime($max_inactive_time)
    {
        $this->container['max_inactive_time'] = $max_inactive_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


