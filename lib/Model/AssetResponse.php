<?php
/**
 * AssetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AssetResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'owner' => '\Swagger\Client\Model\IdNameType',
        'name' => 'string',
        'asset_type' => '\Swagger\Client\Model\IdName',
        'color' => 'string',
        'tags' => 'string[]',
        'cost_centre' => '\Swagger\Client\Model\IdName',
        'rating_profile' => '\Swagger\Client\Model\IdName',
        'asset_state_profiles' => '\Swagger\Client\Model\IdName[]',
        'overspeed_profile' => '\Swagger\Client\Model\IdName',
        'geo_lock_profile' => '\Swagger\Client\Model\IdName',
        'road_profile' => '\Swagger\Client\Model\IdName',
        'privacy_profile' => '\Swagger\Client\Model\IdName',
        'groups' => '\Swagger\Client\Model\IdName[]',
        'categories' => '\Swagger\Client\Model\IdName[]',
        'shared_with' => '\Swagger\Client\Model\IdName[]',
        'asset_tag' => '\Swagger\Client\Model\IdName',
        'state' => 'string',
        'fields' => '\Swagger\Client\Model\CustomFieldValues',
        'parameters' => '\Swagger\Client\Model\AssetParameters',
        'geo_lock' => '\Swagger\Client\Model\AssetGeoLock',
        'contacts' => '\Swagger\Client\Model\Contact[]',
        'location' => '\Swagger\Client\Model\AssetLocation',
        'zones' => '\Swagger\Client\Model\AssetZoneTarget[]',
        'default_trip_labels' => 'string[]',
        'devices' => '\Swagger\Client\Model\AssetDevice[]',
        'linked_from' => '\Swagger\Client\Model\AssetLinkage',
        'linked_to' => '\Swagger\Client\Model\AssetLinkage[]',
        'privacy' => '\Swagger\Client\Model\AssetPrivacyResponse',
        'entity' => '\Swagger\Client\Model\EntityInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'owner' => null,
        'name' => null,
        'asset_type' => null,
        'color' => null,
        'tags' => null,
        'cost_centre' => null,
        'rating_profile' => null,
        'asset_state_profiles' => null,
        'overspeed_profile' => null,
        'geo_lock_profile' => null,
        'road_profile' => null,
        'privacy_profile' => null,
        'groups' => null,
        'categories' => null,
        'shared_with' => null,
        'asset_tag' => null,
        'state' => null,
        'fields' => null,
        'parameters' => null,
        'geo_lock' => null,
        'contacts' => null,
        'location' => null,
        'zones' => null,
        'default_trip_labels' => null,
        'devices' => null,
        'linked_from' => null,
        'linked_to' => null,
        'privacy' => null,
        'entity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'owner' => 'owner',
        'name' => 'name',
        'asset_type' => 'assetType',
        'color' => 'color',
        'tags' => 'tags',
        'cost_centre' => 'costCentre',
        'rating_profile' => 'ratingProfile',
        'asset_state_profiles' => 'assetStateProfiles',
        'overspeed_profile' => 'overspeedProfile',
        'geo_lock_profile' => 'geoLockProfile',
        'road_profile' => 'roadProfile',
        'privacy_profile' => 'privacyProfile',
        'groups' => 'groups',
        'categories' => 'categories',
        'shared_with' => 'sharedWith',
        'asset_tag' => 'assetTag',
        'state' => 'state',
        'fields' => 'fields',
        'parameters' => 'parameters',
        'geo_lock' => 'geoLock',
        'contacts' => 'contacts',
        'location' => 'location',
        'zones' => 'zones',
        'default_trip_labels' => 'defaultTripLabels',
        'devices' => 'devices',
        'linked_from' => 'linkedFrom',
        'linked_to' => 'linkedTo',
        'privacy' => 'privacy',
        'entity' => 'entity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'owner' => 'setOwner',
        'name' => 'setName',
        'asset_type' => 'setAssetType',
        'color' => 'setColor',
        'tags' => 'setTags',
        'cost_centre' => 'setCostCentre',
        'rating_profile' => 'setRatingProfile',
        'asset_state_profiles' => 'setAssetStateProfiles',
        'overspeed_profile' => 'setOverspeedProfile',
        'geo_lock_profile' => 'setGeoLockProfile',
        'road_profile' => 'setRoadProfile',
        'privacy_profile' => 'setPrivacyProfile',
        'groups' => 'setGroups',
        'categories' => 'setCategories',
        'shared_with' => 'setSharedWith',
        'asset_tag' => 'setAssetTag',
        'state' => 'setState',
        'fields' => 'setFields',
        'parameters' => 'setParameters',
        'geo_lock' => 'setGeoLock',
        'contacts' => 'setContacts',
        'location' => 'setLocation',
        'zones' => 'setZones',
        'default_trip_labels' => 'setDefaultTripLabels',
        'devices' => 'setDevices',
        'linked_from' => 'setLinkedFrom',
        'linked_to' => 'setLinkedTo',
        'privacy' => 'setPrivacy',
        'entity' => 'setEntity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'owner' => 'getOwner',
        'name' => 'getName',
        'asset_type' => 'getAssetType',
        'color' => 'getColor',
        'tags' => 'getTags',
        'cost_centre' => 'getCostCentre',
        'rating_profile' => 'getRatingProfile',
        'asset_state_profiles' => 'getAssetStateProfiles',
        'overspeed_profile' => 'getOverspeedProfile',
        'geo_lock_profile' => 'getGeoLockProfile',
        'road_profile' => 'getRoadProfile',
        'privacy_profile' => 'getPrivacyProfile',
        'groups' => 'getGroups',
        'categories' => 'getCategories',
        'shared_with' => 'getSharedWith',
        'asset_tag' => 'getAssetTag',
        'state' => 'getState',
        'fields' => 'getFields',
        'parameters' => 'getParameters',
        'geo_lock' => 'getGeoLock',
        'contacts' => 'getContacts',
        'location' => 'getLocation',
        'zones' => 'getZones',
        'default_trip_labels' => 'getDefaultTripLabels',
        'devices' => 'getDevices',
        'linked_from' => 'getLinkedFrom',
        'linked_to' => 'getLinkedTo',
        'privacy' => 'getPrivacy',
        'entity' => 'getEntity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COLOR_BLUE = 'blue';
    const COLOR_LIGHTBLUE = 'lightblue';
    const COLOR_GREEN = 'green';
    const COLOR_OLIVE = 'olive';
    const COLOR_ORANGE = 'orange';
    const COLOR_PINK = 'pink';
    const COLOR_PURPLE = 'purple';
    const COLOR_RED = 'red';
    const COLOR_TEAL = 'teal';
    const COLOR_YELLOW = 'yellow';
    const COLOR_WHITE = 'white';
    const COLOR_GRAY = 'gray';
    const STATE_INACTIVE = 'inactive';
    const STATE_ACTIVE = 'active';
    const STATE_SUSPENDED = 'suspended';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColorAllowableValues()
    {
        return [
            self::COLOR_BLUE,
            self::COLOR_LIGHTBLUE,
            self::COLOR_GREEN,
            self::COLOR_OLIVE,
            self::COLOR_ORANGE,
            self::COLOR_PINK,
            self::COLOR_PURPLE,
            self::COLOR_RED,
            self::COLOR_TEAL,
            self::COLOR_YELLOW,
            self::COLOR_WHITE,
            self::COLOR_GRAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INACTIVE,
            self::STATE_ACTIVE,
            self::STATE_SUSPENDED,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['cost_centre'] = isset($data['cost_centre']) ? $data['cost_centre'] : null;
        $this->container['rating_profile'] = isset($data['rating_profile']) ? $data['rating_profile'] : null;
        $this->container['asset_state_profiles'] = isset($data['asset_state_profiles']) ? $data['asset_state_profiles'] : null;
        $this->container['overspeed_profile'] = isset($data['overspeed_profile']) ? $data['overspeed_profile'] : null;
        $this->container['geo_lock_profile'] = isset($data['geo_lock_profile']) ? $data['geo_lock_profile'] : null;
        $this->container['road_profile'] = isset($data['road_profile']) ? $data['road_profile'] : null;
        $this->container['privacy_profile'] = isset($data['privacy_profile']) ? $data['privacy_profile'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['shared_with'] = isset($data['shared_with']) ? $data['shared_with'] : null;
        $this->container['asset_tag'] = isset($data['asset_tag']) ? $data['asset_tag'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['geo_lock'] = isset($data['geo_lock']) ? $data['geo_lock'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
        $this->container['default_trip_labels'] = isset($data['default_trip_labels']) ? $data['default_trip_labels'] : null;
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['linked_from'] = isset($data['linked_from']) ? $data['linked_from'] : null;
        $this->container['linked_to'] = isset($data['linked_to']) ? $data['linked_to'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        $allowedValues = $this->getColorAllowableValues();
        if (!is_null($this->container['color']) && !in_array($this->container['color'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'color', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['entity'] === null) {
            $invalidProperties[] = "'entity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique UUID of this entity
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\IdNameType $owner The company entity that owns this entity
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A client unique name for this asset. This can be any value that is relevant for the client.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param \Swagger\Client\Model\IdName $asset_type The type of asset
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The color of the icon for this asset
     *
     * @return $this
     */
    public function setColor($color)
    {
        $allowedValues = $this->getColorAllowableValues();
        if (!is_null($color) && !in_array($color, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'color', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets cost_centre
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getCostCentre()
    {
        return $this->container['cost_centre'];
    }

    /**
     * Sets cost_centre
     *
     * @param \Swagger\Client\Model\IdName $cost_centre The cost centre to which this asset belongs
     *
     * @return $this
     */
    public function setCostCentre($cost_centre)
    {
        $this->container['cost_centre'] = $cost_centre;

        return $this;
    }

    /**
     * Gets rating_profile
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getRatingProfile()
    {
        return $this->container['rating_profile'];
    }

    /**
     * Sets rating_profile
     *
     * @param \Swagger\Client\Model\IdName $rating_profile The trip rating profile to use for this assets trip rating
     *
     * @return $this
     */
    public function setRatingProfile($rating_profile)
    {
        $this->container['rating_profile'] = $rating_profile;

        return $this;
    }

    /**
     * Gets asset_state_profiles
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getAssetStateProfiles()
    {
        return $this->container['asset_state_profiles'];
    }

    /**
     * Sets asset_state_profiles
     *
     * @param \Swagger\Client\Model\IdName[] $asset_state_profiles One or more asset state profiles to use for this asset
     *
     * @return $this
     */
    public function setAssetStateProfiles($asset_state_profiles)
    {
        $this->container['asset_state_profiles'] = $asset_state_profiles;

        return $this;
    }

    /**
     * Gets overspeed_profile
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getOverspeedProfile()
    {
        return $this->container['overspeed_profile'];
    }

    /**
     * Sets overspeed_profile
     *
     * @param \Swagger\Client\Model\IdName $overspeed_profile The overspeed profile to use for this asset
     *
     * @return $this
     */
    public function setOverspeedProfile($overspeed_profile)
    {
        $this->container['overspeed_profile'] = $overspeed_profile;

        return $this;
    }

    /**
     * Gets geo_lock_profile
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getGeoLockProfile()
    {
        return $this->container['geo_lock_profile'];
    }

    /**
     * Sets geo_lock_profile
     *
     * @param \Swagger\Client\Model\IdName $geo_lock_profile The geo lock profile to use for this asset
     *
     * @return $this
     */
    public function setGeoLockProfile($geo_lock_profile)
    {
        $this->container['geo_lock_profile'] = $geo_lock_profile;

        return $this;
    }

    /**
     * Gets road_profile
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getRoadProfile()
    {
        return $this->container['road_profile'];
    }

    /**
     * Sets road_profile
     *
     * @param \Swagger\Client\Model\IdName $road_profile The road profile to use for this asset
     *
     * @return $this
     */
    public function setRoadProfile($road_profile)
    {
        $this->container['road_profile'] = $road_profile;

        return $this;
    }

    /**
     * Gets privacy_profile
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getPrivacyProfile()
    {
        return $this->container['privacy_profile'];
    }

    /**
     * Sets privacy_profile
     *
     * @param \Swagger\Client\Model\IdName $privacy_profile The privacy profile to use for this asset
     *
     * @return $this
     */
    public function setPrivacyProfile($privacy_profile)
    {
        $this->container['privacy_profile'] = $privacy_profile;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Swagger\Client\Model\IdName[] $groups One of more asset groups that this asset belongs to
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Swagger\Client\Model\IdName[] $categories Up to 5 different categories that this asset belongs to
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets shared_with
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getSharedWith()
    {
        return $this->container['shared_with'];
    }

    /**
     * Sets shared_with
     *
     * @param \Swagger\Client\Model\IdName[] $shared_with One or more clients to which this asset has been shared.
     *
     * @return $this
     */
    public function setSharedWith($shared_with)
    {
        $this->container['shared_with'] = $shared_with;

        return $this;
    }

    /**
     * Gets asset_tag
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getAssetTag()
    {
        return $this->container['asset_tag'];
    }

    /**
     * Sets asset_tag
     *
     * @param \Swagger\Client\Model\IdName $asset_tag asset_tag
     *
     * @return $this
     */
    public function setAssetTag($asset_tag)
    {
        $this->container['asset_tag'] = $asset_tag;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the asset object
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\CustomFieldValues
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\CustomFieldValues $fields A number of custom field values for this asset.
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Swagger\Client\Model\AssetParameters
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Swagger\Client\Model\AssetParameters $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets geo_lock
     *
     * @return \Swagger\Client\Model\AssetGeoLock
     */
    public function getGeoLock()
    {
        return $this->container['geo_lock'];
    }

    /**
     * Sets geo_lock
     *
     * @param \Swagger\Client\Model\AssetGeoLock $geo_lock Details about an active geo-lock on this asset (if any)
     *
     * @return $this
     */
    public function setGeoLock($geo_lock)
    {
        $this->container['geo_lock'] = $geo_lock;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Swagger\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Swagger\Client\Model\Contact[] $contacts One or more contacts that are relevant to this asset
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\AssetLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\AssetLocation $location For static assets this field can be set with the known location of the asset
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return \Swagger\Client\Model\AssetZoneTarget[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param \Swagger\Client\Model\AssetZoneTarget[] $zones A list of zones and routes that are relevant to this asset
     *
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets default_trip_labels
     *
     * @return string[]
     */
    public function getDefaultTripLabels()
    {
        return $this->container['default_trip_labels'];
    }

    /**
     * Sets default_trip_labels
     *
     * @param string[] $default_trip_labels A list of labels that will be applied to trips from this asset by default.
     *
     * @return $this
     */
    public function setDefaultTripLabels($default_trip_labels)
    {
        $this->container['default_trip_labels'] = $default_trip_labels;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \Swagger\Client\Model\AssetDevice[]
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \Swagger\Client\Model\AssetDevice[] $devices One or more devices that provide telemetry data for this asset.  Can only be modified using the `updateDevice` operation.
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets linked_from
     *
     * @return \Swagger\Client\Model\AssetLinkage
     */
    public function getLinkedFrom()
    {
        return $this->container['linked_from'];
    }

    /**
     * Sets linked_from
     *
     * @param \Swagger\Client\Model\AssetLinkage $linked_from Information about asset linkage, can only be modified with the `linkAssets` operation.
     *
     * @return $this
     */
    public function setLinkedFrom($linked_from)
    {
        $this->container['linked_from'] = $linked_from;

        return $this;
    }

    /**
     * Gets linked_to
     *
     * @return \Swagger\Client\Model\AssetLinkage[]
     */
    public function getLinkedTo()
    {
        return $this->container['linked_to'];
    }

    /**
     * Sets linked_to
     *
     * @param \Swagger\Client\Model\AssetLinkage[] $linked_to A list of assets this asset it linked to, can only be modified with the `linkAssets` operation.
     *
     * @return $this
     */
    public function setLinkedTo($linked_to)
    {
        $this->container['linked_to'] = $linked_to;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return \Swagger\Client\Model\AssetPrivacyResponse
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param \Swagger\Client\Model\AssetPrivacyResponse $privacy If this is set (and the conditions are valid), the asset will run in privacy mode.
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return \Swagger\Client\Model\EntityInfo
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param \Swagger\Client\Model\EntityInfo $entity entity specific metadata
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


