<?php
/**
 * AuthOtpStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuthOtpStatus Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthOtpStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthOtpStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'methods' => '\Swagger\Client\Model\UserOTPMethod[]',
        'required_from' => 'string',
        'authenticated' => 'bool',
        'token_validity_days' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'methods' => null,
        'required_from' => null,
        'authenticated' => null,
        'token_validity_days' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'methods' => 'methods',
        'required_from' => 'requiredFrom',
        'authenticated' => 'authenticated',
        'token_validity_days' => 'tokenValidityDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'methods' => 'setMethods',
        'required_from' => 'setRequiredFrom',
        'authenticated' => 'setAuthenticated',
        'token_validity_days' => 'setTokenValidityDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'methods' => 'getMethods',
        'required_from' => 'getRequiredFrom',
        'authenticated' => 'getAuthenticated',
        'token_validity_days' => 'getTokenValidityDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['methods'] = isset($data['methods']) ? $data['methods'] : null;
        $this->container['required_from'] = isset($data['required_from']) ? $data['required_from'] : null;
        $this->container['authenticated'] = isset($data['authenticated']) ? $data['authenticated'] : null;
        $this->container['token_validity_days'] = isset($data['token_validity_days']) ? $data['token_validity_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['methods'] === null) {
            $invalidProperties[] = "'methods' can't be null";
        }
        if ($this->container['required_from'] === null) {
            $invalidProperties[] = "'required_from' can't be null";
        }
        if ($this->container['authenticated'] === null) {
            $invalidProperties[] = "'authenticated' can't be null";
        }
        if ($this->container['token_validity_days'] === null) {
            $invalidProperties[] = "'token_validity_days' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets methods
     *
     * @return \Swagger\Client\Model\UserOTPMethod[]
     */
    public function getMethods()
    {
        return $this->container['methods'];
    }

    /**
     * Sets methods
     *
     * @param \Swagger\Client\Model\UserOTPMethod[] $methods The type of OTP that is required for this user.
     *
     * @return $this
     */
    public function setMethods($methods)
    {
        $this->container['methods'] = $methods;

        return $this;
    }

    /**
     * Gets required_from
     *
     * @return string
     */
    public function getRequiredFrom()
    {
        return $this->container['required_from'];
    }

    /**
     * Sets required_from
     *
     * @param string $required_from Date by which the user is required to use OTP authentication.
     *
     * @return $this
     */
    public function setRequiredFrom($required_from)
    {
        $this->container['required_from'] = $required_from;

        return $this;
    }

    /**
     * Gets authenticated
     *
     * @return bool
     */
    public function getAuthenticated()
    {
        return $this->container['authenticated'];
    }

    /**
     * Sets authenticated
     *
     * @param bool $authenticated If true, the cached OTP token for the user has been accepted, and OTP can be skipped.
     *
     * @return $this
     */
    public function setAuthenticated($authenticated)
    {
        $this->container['authenticated'] = $authenticated;

        return $this;
    }

    /**
     * Gets token_validity_days
     *
     * @return double
     */
    public function getTokenValidityDays()
    {
        return $this->container['token_validity_days'];
    }

    /**
     * Sets token_validity_days
     *
     * @param double $token_validity_days The number of days for which any OTP tokens returned by the API will be valid for
     *
     * @return $this
     */
    public function setTokenValidityDays($token_validity_days)
    {
        $this->container['token_validity_days'] = $token_validity_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


