<?php
/**
 * ClientCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientCreateRequest Class Doc Comment
 *
 * @category Class
 * @description The ClientCreateRequest is used to create a new entity.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'tags' => 'string[]',
        'website' => 'string',
        'state' => 'string',
        'entity' => '\Swagger\Client\Model\EntityInfo',
        'limits' => '\Swagger\Client\Model\SoftLimits',
        'flags' => '\Swagger\Client\Model\FlagsBucket',
        'retention' => '\Swagger\Client\Model\CompanyDataRetentionSettings',
        'password_policy' => '\Swagger\Client\Model\UserPasswordPolicy',
        'theme' => '\Swagger\Client\Model\ThemeInfo',
        'address' => '\Swagger\Client\Model\CompanyAddress',
        'time_zone_id' => 'string',
        'custom_fields' => '\Swagger\Client\Model\CustomFields',
        'domains' => 'string[]',
        'language' => 'string',
        'support' => '\Swagger\Client\Model\CompanySupportDetails',
        'messages' => '\Swagger\Client\Model\CompanyMessages',
        'oidc' => '\Swagger\Client\Model\OpenIdConnectIssuers',
        'email_provider' => '\Swagger\Client\Model\IdNameState',
        'ssl_certificates' => '\Swagger\Client\Model\CompanySSLCertificate[]',
        'map_set' => '\Swagger\Client\Model\IdName',
        'features' => '\Swagger\Client\Model\Features',
        'pin' => 'string',
        'group' => 'string',
        'available_device_types' => '\Swagger\Client\Model\IdName[]',
        'meta' => '\Swagger\Client\Model\ClientMeta',
        'shift_pattern' => '\Swagger\Client\Model\ShiftPattern',
        'measurement_units' => '\Swagger\Client\Model\ClientMeasurementUnits',
        'owner_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'tags' => null,
        'website' => null,
        'state' => null,
        'entity' => null,
        'limits' => null,
        'flags' => null,
        'retention' => null,
        'password_policy' => null,
        'theme' => null,
        'address' => null,
        'time_zone_id' => null,
        'custom_fields' => null,
        'domains' => null,
        'language' => null,
        'support' => null,
        'messages' => null,
        'oidc' => null,
        'email_provider' => null,
        'ssl_certificates' => null,
        'map_set' => null,
        'features' => null,
        'pin' => null,
        'group' => null,
        'available_device_types' => null,
        'meta' => null,
        'shift_pattern' => null,
        'measurement_units' => null,
        'owner_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'tags' => 'tags',
        'website' => 'website',
        'state' => 'state',
        'entity' => 'entity',
        'limits' => 'limits',
        'flags' => 'flags',
        'retention' => 'retention',
        'password_policy' => 'passwordPolicy',
        'theme' => 'theme',
        'address' => 'address',
        'time_zone_id' => 'timeZoneId',
        'custom_fields' => 'customFields',
        'domains' => 'domains',
        'language' => 'language',
        'support' => 'support',
        'messages' => 'messages',
        'oidc' => 'oidc',
        'email_provider' => 'emailProvider',
        'ssl_certificates' => 'sslCertificates',
        'map_set' => 'mapSet',
        'features' => 'features',
        'pin' => 'pin',
        'group' => 'group',
        'available_device_types' => 'availableDeviceTypes',
        'meta' => 'meta',
        'shift_pattern' => 'shiftPattern',
        'measurement_units' => 'measurementUnits',
        'owner_id' => 'ownerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'tags' => 'setTags',
        'website' => 'setWebsite',
        'state' => 'setState',
        'entity' => 'setEntity',
        'limits' => 'setLimits',
        'flags' => 'setFlags',
        'retention' => 'setRetention',
        'password_policy' => 'setPasswordPolicy',
        'theme' => 'setTheme',
        'address' => 'setAddress',
        'time_zone_id' => 'setTimeZoneId',
        'custom_fields' => 'setCustomFields',
        'domains' => 'setDomains',
        'language' => 'setLanguage',
        'support' => 'setSupport',
        'messages' => 'setMessages',
        'oidc' => 'setOidc',
        'email_provider' => 'setEmailProvider',
        'ssl_certificates' => 'setSslCertificates',
        'map_set' => 'setMapSet',
        'features' => 'setFeatures',
        'pin' => 'setPin',
        'group' => 'setGroup',
        'available_device_types' => 'setAvailableDeviceTypes',
        'meta' => 'setMeta',
        'shift_pattern' => 'setShiftPattern',
        'measurement_units' => 'setMeasurementUnits',
        'owner_id' => 'setOwnerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'tags' => 'getTags',
        'website' => 'getWebsite',
        'state' => 'getState',
        'entity' => 'getEntity',
        'limits' => 'getLimits',
        'flags' => 'getFlags',
        'retention' => 'getRetention',
        'password_policy' => 'getPasswordPolicy',
        'theme' => 'getTheme',
        'address' => 'getAddress',
        'time_zone_id' => 'getTimeZoneId',
        'custom_fields' => 'getCustomFields',
        'domains' => 'getDomains',
        'language' => 'getLanguage',
        'support' => 'getSupport',
        'messages' => 'getMessages',
        'oidc' => 'getOidc',
        'email_provider' => 'getEmailProvider',
        'ssl_certificates' => 'getSslCertificates',
        'map_set' => 'getMapSet',
        'features' => 'getFeatures',
        'pin' => 'getPin',
        'group' => 'getGroup',
        'available_device_types' => 'getAvailableDeviceTypes',
        'meta' => 'getMeta',
        'shift_pattern' => 'getShiftPattern',
        'measurement_units' => 'getMeasurementUnits',
        'owner_id' => 'getOwnerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_INACTIVE = 'inactive';
    const STATE_ACTIVE = 'active';
    const STATE_SUSPENDED = 'suspended';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INACTIVE,
            self::STATE_ACTIVE,
            self::STATE_SUSPENDED,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['limits'] = isset($data['limits']) ? $data['limits'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['retention'] = isset($data['retention']) ? $data['retention'] : null;
        $this->container['password_policy'] = isset($data['password_policy']) ? $data['password_policy'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['support'] = isset($data['support']) ? $data['support'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['oidc'] = isset($data['oidc']) ? $data['oidc'] : null;
        $this->container['email_provider'] = isset($data['email_provider']) ? $data['email_provider'] : null;
        $this->container['ssl_certificates'] = isset($data['ssl_certificates']) ? $data['ssl_certificates'] : null;
        $this->container['map_set'] = isset($data['map_set']) ? $data['map_set'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['pin'] = isset($data['pin']) ? $data['pin'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['available_device_types'] = isset($data['available_device_types']) ? $data['available_device_types'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['shift_pattern'] = isset($data['shift_pattern']) ? $data['shift_pattern'] : null;
        $this->container['measurement_units'] = isset($data['measurement_units']) ? $data['measurement_units'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The display name of the company
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A list of custom ID's for this company. Can be queried using the getClientByTag, getVendorByTag and getDistributorByTag methods.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website The company website (if available)
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of this company
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return \Swagger\Client\Model\EntityInfo
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param \Swagger\Client\Model\EntityInfo $entity Entity specific metadata
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \Swagger\Client\Model\SoftLimits
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \Swagger\Client\Model\SoftLimits $limits Soft limits that apply to this company. This includes overrides only, see `getLookups` for defaults.
     *
     * @return $this
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return \Swagger\Client\Model\FlagsBucket
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param \Swagger\Client\Model\FlagsBucket $flags A set of user defined flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets retention
     *
     * @return \Swagger\Client\Model\CompanyDataRetentionSettings
     */
    public function getRetention()
    {
        return $this->container['retention'];
    }

    /**
     * Sets retention
     *
     * @param \Swagger\Client\Model\CompanyDataRetentionSettings $retention Data retention settings. If this is null, settings from the parent or group will be used instead.
     *
     * @return $this
     */
    public function setRetention($retention)
    {
        $this->container['retention'] = $retention;

        return $this;
    }

    /**
     * Gets password_policy
     *
     * @return \Swagger\Client\Model\UserPasswordPolicy
     */
    public function getPasswordPolicy()
    {
        return $this->container['password_policy'];
    }

    /**
     * Sets password_policy
     *
     * @param \Swagger\Client\Model\UserPasswordPolicy $password_policy Password policy to apply to users. If this is null, settings from the group will be used instead.
     *
     * @return $this
     */
    public function setPasswordPolicy($password_policy)
    {
        $this->container['password_policy'] = $password_policy;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return \Swagger\Client\Model\ThemeInfo
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \Swagger\Client\Model\ThemeInfo $theme The theme that this company uses
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\CompanyAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\CompanyAddress $address Address information for this company
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id The default timezone for this company
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\CustomFields
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\CustomFields $custom_fields A set of custom fields for this company
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains A list of custom domains to use for this company
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The default language to user for this client.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets support
     *
     * @return \Swagger\Client\Model\CompanySupportDetails
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param \Swagger\Client\Model\CompanySupportDetails $support Support contact information that will be displayed to user of this company
     *
     * @return $this
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Swagger\Client\Model\CompanyMessages
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Swagger\Client\Model\CompanyMessages $messages Customized messages that are displayed to users of this company.
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets oidc
     *
     * @return \Swagger\Client\Model\OpenIdConnectIssuers
     */
    public function getOidc()
    {
        return $this->container['oidc'];
    }

    /**
     * Sets oidc
     *
     * @param \Swagger\Client\Model\OpenIdConnectIssuers $oidc A set of OpenId Connect issuers that are able to authenticate users on our behalf.
     *
     * @return $this
     */
    public function setOidc($oidc)
    {
        $this->container['oidc'] = $oidc;

        return $this;
    }

    /**
     * Gets email_provider
     *
     * @return \Swagger\Client\Model\IdNameState
     */
    public function getEmailProvider()
    {
        return $this->container['email_provider'];
    }

    /**
     * Sets email_provider
     *
     * @param \Swagger\Client\Model\IdNameState $email_provider The email provider to be used when sending emails
     *
     * @return $this
     */
    public function setEmailProvider($email_provider)
    {
        $this->container['email_provider'] = $email_provider;

        return $this;
    }

    /**
     * Gets ssl_certificates
     *
     * @return \Swagger\Client\Model\CompanySSLCertificate[]
     */
    public function getSslCertificates()
    {
        return $this->container['ssl_certificates'];
    }

    /**
     * Sets ssl_certificates
     *
     * @param \Swagger\Client\Model\CompanySSLCertificate[] $ssl_certificates A list of ssl certificates provisioned for this company
     *
     * @return $this
     */
    public function setSslCertificates($ssl_certificates)
    {
        $this->container['ssl_certificates'] = $ssl_certificates;

        return $this;
    }

    /**
     * Gets map_set
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getMapSet()
    {
        return $this->container['map_set'];
    }

    /**
     * Sets map_set
     *
     * @param \Swagger\Client\Model\IdName $map_set The map set that has been defined for this client. It may be empty in which case the default will be used.
     *
     * @return $this
     */
    public function setMapSet($map_set)
    {
        $this->container['map_set'] = $map_set;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\Features
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\Features $features [DEPRECATED] use the `flags` property instead.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin A user friendly pin that uniquely identifies this client.
     *
     * @return $this
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group The group that this client belongs to
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets available_device_types
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getAvailableDeviceTypes()
    {
        return $this->container['available_device_types'];
    }

    /**
     * Sets available_device_types
     *
     * @param \Swagger\Client\Model\IdName[] $available_device_types UUID's of the device types that this client is allowed to use. An empty list means all device types.
     *
     * @return $this
     */
    public function setAvailableDeviceTypes($available_device_types)
    {
        $this->container['available_device_types'] = $available_device_types;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Swagger\Client\Model\ClientMeta
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Swagger\Client\Model\ClientMeta $meta Dynamically resolved meta information for the client
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets shift_pattern
     *
     * @return \Swagger\Client\Model\ShiftPattern
     */
    public function getShiftPattern()
    {
        return $this->container['shift_pattern'];
    }

    /**
     * Sets shift_pattern
     *
     * @param \Swagger\Client\Model\ShiftPattern $shift_pattern A shift pattern for the client
     *
     * @return $this
     */
    public function setShiftPattern($shift_pattern)
    {
        $this->container['shift_pattern'] = $shift_pattern;

        return $this;
    }

    /**
     * Gets measurement_units
     *
     * @return \Swagger\Client\Model\ClientMeasurementUnits
     */
    public function getMeasurementUnits()
    {
        return $this->container['measurement_units'];
    }

    /**
     * Sets measurement_units
     *
     * @param \Swagger\Client\Model\ClientMeasurementUnits $measurement_units Measurement unit configuration for this client.
     *
     * @return $this
     */
    public function setMeasurementUnits($measurement_units)
    {
        $this->container['measurement_units'] = $measurement_units;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


