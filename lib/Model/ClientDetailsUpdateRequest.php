<?php
/**
 * ClientDetailsUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientDetailsUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientDetailsUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientDetailsUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'theme' => '\Swagger\Client\Model\ThemeInfo',
        'address' => '\Swagger\Client\Model\CompanyAddress',
        'time_zone_id' => 'string',
        'custom_fields' => '\Swagger\Client\Model\CustomFields',
        'domains' => 'string[]',
        'language' => 'string',
        'support' => '\Swagger\Client\Model\CompanySupportDetails',
        'messages' => '\Swagger\Client\Model\CompanyMessages',
        'oidc' => '\Swagger\Client\Model\OpenIdConnectIssuers',
        'email_provider' => '\Swagger\Client\Model\IdNameState',
        'ssl_certificates' => '\Swagger\Client\Model\CompanySSLCertificate[]',
        'measurement_units' => '\Swagger\Client\Model\ClientMeasurementUnits'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'theme' => null,
        'address' => null,
        'time_zone_id' => null,
        'custom_fields' => null,
        'domains' => null,
        'language' => null,
        'support' => null,
        'messages' => null,
        'oidc' => null,
        'email_provider' => null,
        'ssl_certificates' => null,
        'measurement_units' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'theme' => 'theme',
        'address' => 'address',
        'time_zone_id' => 'timeZoneId',
        'custom_fields' => 'customFields',
        'domains' => 'domains',
        'language' => 'language',
        'support' => 'support',
        'messages' => 'messages',
        'oidc' => 'oidc',
        'email_provider' => 'emailProvider',
        'ssl_certificates' => 'sslCertificates',
        'measurement_units' => 'measurementUnits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'theme' => 'setTheme',
        'address' => 'setAddress',
        'time_zone_id' => 'setTimeZoneId',
        'custom_fields' => 'setCustomFields',
        'domains' => 'setDomains',
        'language' => 'setLanguage',
        'support' => 'setSupport',
        'messages' => 'setMessages',
        'oidc' => 'setOidc',
        'email_provider' => 'setEmailProvider',
        'ssl_certificates' => 'setSslCertificates',
        'measurement_units' => 'setMeasurementUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'theme' => 'getTheme',
        'address' => 'getAddress',
        'time_zone_id' => 'getTimeZoneId',
        'custom_fields' => 'getCustomFields',
        'domains' => 'getDomains',
        'language' => 'getLanguage',
        'support' => 'getSupport',
        'messages' => 'getMessages',
        'oidc' => 'getOidc',
        'email_provider' => 'getEmailProvider',
        'ssl_certificates' => 'getSslCertificates',
        'measurement_units' => 'getMeasurementUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['support'] = isset($data['support']) ? $data['support'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['oidc'] = isset($data['oidc']) ? $data['oidc'] : null;
        $this->container['email_provider'] = isset($data['email_provider']) ? $data['email_provider'] : null;
        $this->container['ssl_certificates'] = isset($data['ssl_certificates']) ? $data['ssl_certificates'] : null;
        $this->container['measurement_units'] = isset($data['measurement_units']) ? $data['measurement_units'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets theme
     *
     * @return \Swagger\Client\Model\ThemeInfo
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \Swagger\Client\Model\ThemeInfo $theme The theme that this company uses
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\CompanyAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\CompanyAddress $address Address information for this company
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id The default timezone for this company
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\CustomFields
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\CustomFields $custom_fields A set of custom fields for this company
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains A list of custom domains to use for this company
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The default language to user for this client.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets support
     *
     * @return \Swagger\Client\Model\CompanySupportDetails
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param \Swagger\Client\Model\CompanySupportDetails $support Support contact information that will be displayed to user of this company
     *
     * @return $this
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Swagger\Client\Model\CompanyMessages
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Swagger\Client\Model\CompanyMessages $messages Customized messages that are displayed to users of this company.
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets oidc
     *
     * @return \Swagger\Client\Model\OpenIdConnectIssuers
     */
    public function getOidc()
    {
        return $this->container['oidc'];
    }

    /**
     * Sets oidc
     *
     * @param \Swagger\Client\Model\OpenIdConnectIssuers $oidc A set of OpenId Connect issuers that are able to authenticate users on our behalf.
     *
     * @return $this
     */
    public function setOidc($oidc)
    {
        $this->container['oidc'] = $oidc;

        return $this;
    }

    /**
     * Gets email_provider
     *
     * @return \Swagger\Client\Model\IdNameState
     */
    public function getEmailProvider()
    {
        return $this->container['email_provider'];
    }

    /**
     * Sets email_provider
     *
     * @param \Swagger\Client\Model\IdNameState $email_provider The email provider to be used when sending emails
     *
     * @return $this
     */
    public function setEmailProvider($email_provider)
    {
        $this->container['email_provider'] = $email_provider;

        return $this;
    }

    /**
     * Gets ssl_certificates
     *
     * @return \Swagger\Client\Model\CompanySSLCertificate[]
     */
    public function getSslCertificates()
    {
        return $this->container['ssl_certificates'];
    }

    /**
     * Sets ssl_certificates
     *
     * @param \Swagger\Client\Model\CompanySSLCertificate[] $ssl_certificates A list of ssl certificates provisioned for this company
     *
     * @return $this
     */
    public function setSslCertificates($ssl_certificates)
    {
        $this->container['ssl_certificates'] = $ssl_certificates;

        return $this;
    }

    /**
     * Gets measurement_units
     *
     * @return \Swagger\Client\Model\ClientMeasurementUnits
     */
    public function getMeasurementUnits()
    {
        return $this->container['measurement_units'];
    }

    /**
     * Sets measurement_units
     *
     * @param \Swagger\Client\Model\ClientMeasurementUnits $measurement_units Measurement unit configuration for this client.
     *
     * @return $this
     */
    public function setMeasurementUnits($measurement_units)
    {
        $this->container['measurement_units'] = $measurement_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


