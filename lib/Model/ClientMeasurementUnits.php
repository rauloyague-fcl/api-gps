<?php
/**
 * ClientMeasurementUnits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientMeasurementUnits Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientMeasurementUnits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientMeasurementUnits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distance_unit' => 'string',
        'altitude_unit' => 'string',
        'speed_unit' => 'string',
        'area_unit' => 'string',
        'volume_unit' => 'string',
        'weight_unit' => 'string',
        'time_unit' => 'string',
        'date_unit' => 'string',
        'temperature_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'distance_unit' => null,
        'altitude_unit' => null,
        'speed_unit' => null,
        'area_unit' => null,
        'volume_unit' => null,
        'weight_unit' => null,
        'time_unit' => null,
        'date_unit' => null,
        'temperature_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distance_unit' => 'distanceUnit',
        'altitude_unit' => 'altitudeUnit',
        'speed_unit' => 'speedUnit',
        'area_unit' => 'areaUnit',
        'volume_unit' => 'volumeUnit',
        'weight_unit' => 'weightUnit',
        'time_unit' => 'timeUnit',
        'date_unit' => 'dateUnit',
        'temperature_unit' => 'temperatureUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distance_unit' => 'setDistanceUnit',
        'altitude_unit' => 'setAltitudeUnit',
        'speed_unit' => 'setSpeedUnit',
        'area_unit' => 'setAreaUnit',
        'volume_unit' => 'setVolumeUnit',
        'weight_unit' => 'setWeightUnit',
        'time_unit' => 'setTimeUnit',
        'date_unit' => 'setDateUnit',
        'temperature_unit' => 'setTemperatureUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distance_unit' => 'getDistanceUnit',
        'altitude_unit' => 'getAltitudeUnit',
        'speed_unit' => 'getSpeedUnit',
        'area_unit' => 'getAreaUnit',
        'volume_unit' => 'getVolumeUnit',
        'weight_unit' => 'getWeightUnit',
        'time_unit' => 'getTimeUnit',
        'date_unit' => 'getDateUnit',
        'temperature_unit' => 'getTemperatureUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISTANCE_UNIT_KILOMETRES = 'kilometres';
    const DISTANCE_UNIT_METRES = 'metres';
    const DISTANCE_UNIT_FEET = 'feet';
    const DISTANCE_UNIT_INCHES = 'inches';
    const DISTANCE_UNIT_MILES = 'miles';
    const DISTANCE_UNIT_NAUTICAL_MILES = 'nauticalMiles';
    const DISTANCE_UNIT_YARDS = 'yards';
    const ALTITUDE_UNIT_METRES = 'metres';
    const ALTITUDE_UNIT_KILOMETRES = 'kilometres';
    const ALTITUDE_UNIT_FEET = 'feet';
    const ALTITUDE_UNIT_INCHES = 'inches';
    const ALTITUDE_UNIT_MILES = 'miles';
    const ALTITUDE_UNIT_NAUTICAL_MILES = 'nauticalMiles';
    const ALTITUDE_UNIT_YARDS = 'yards';
    const SPEED_UNIT_KILOMETRES_PER_HOUR = 'kilometresPerHour';
    const SPEED_UNIT_METRES_PER_SECOND = 'metresPerSecond';
    const SPEED_UNIT_MILES_PER_HOUR = 'milesPerHour';
    const SPEED_UNIT_KNOTS = 'knots';
    const AREA_UNIT_SQUARE_KILOMETRES = 'squareKilometres';
    const AREA_UNIT_ACRES = 'acres';
    const AREA_UNIT_HECTARES = 'hectares';
    const AREA_UNIT_SQUARE_FEET = 'squareFeet';
    const AREA_UNIT_SQUAREMETRES = 'squaremetres';
    const AREA_UNIT_SQUARE_INCHES = 'squareInches';
    const AREA_UNIT_SQUARE_MILES = 'squareMiles';
    const AREA_UNIT_SQUARE_YARDS = 'squareYards';
    const VOLUME_UNIT_LITRES = 'litres';
    const VOLUME_UNIT_CUBICMETRES = 'cubicmetres';
    const VOLUME_UNIT_CUBIC_FEET = 'cubicFeet';
    const VOLUME_UNIT_GALLONS = 'gallons';
    const VOLUME_UNIT_OUNCES = 'ounces';
    const VOLUME_UNIT_GALLONS_US = 'gallonsUs';
    const VOLUME_UNIT_OUNCES_US = 'ouncesUs';
    const WEIGHT_UNIT_KILOGRAMS = 'kilograms';
    const WEIGHT_UNIT_OUNCES = 'ounces';
    const WEIGHT_UNIT_POUNDS = 'pounds';
    const WEIGHT_UNIT_TONNES = 'tonnes';
    const TIME_UNIT_H_HMMSS = 'HHmmss';
    const TIME_UNIT_HMMSS = 'Hmmss';
    const TIME_UNIT_HMMSSA = 'hmmssa';
    const DATE_UNIT_YYYYMMDD1 = 'yyyymmdd1';
    const DATE_UNIT_YYYYMMDD2 = 'yyyymmdd2';
    const DATE_UNIT_YYYYMMDD3 = 'yyyymmdd3';
    const DATE_UNIT_DDMMYYYY1 = 'ddmmyyyy1';
    const DATE_UNIT_DDMMYYYY2 = 'ddmmyyyy2';
    const DATE_UNIT_DDMMYYYY3 = 'ddmmyyyy3';
    const DATE_UNIT_DMYYYY1 = 'dmyyyy1';
    const DATE_UNIT_DMYYYY2 = 'dmyyyy2';
    const DATE_UNIT_DMYYYY3 = 'dmyyyy3';
    const DATE_UNIT_MMDDYYYY1 = 'mmddyyyy1';
    const DATE_UNIT_MDYYYY1 = 'mdyyyy1';
    const TEMPERATURE_UNIT_CELSIUS = 'celsius';
    const TEMPERATURE_UNIT_FAHRENHEIT = 'fahrenheit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistanceUnitAllowableValues()
    {
        return [
            self::DISTANCE_UNIT_KILOMETRES,
            self::DISTANCE_UNIT_METRES,
            self::DISTANCE_UNIT_FEET,
            self::DISTANCE_UNIT_INCHES,
            self::DISTANCE_UNIT_MILES,
            self::DISTANCE_UNIT_NAUTICAL_MILES,
            self::DISTANCE_UNIT_YARDS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAltitudeUnitAllowableValues()
    {
        return [
            self::ALTITUDE_UNIT_METRES,
            self::ALTITUDE_UNIT_KILOMETRES,
            self::ALTITUDE_UNIT_FEET,
            self::ALTITUDE_UNIT_INCHES,
            self::ALTITUDE_UNIT_MILES,
            self::ALTITUDE_UNIT_NAUTICAL_MILES,
            self::ALTITUDE_UNIT_YARDS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpeedUnitAllowableValues()
    {
        return [
            self::SPEED_UNIT_KILOMETRES_PER_HOUR,
            self::SPEED_UNIT_METRES_PER_SECOND,
            self::SPEED_UNIT_MILES_PER_HOUR,
            self::SPEED_UNIT_KNOTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAreaUnitAllowableValues()
    {
        return [
            self::AREA_UNIT_SQUARE_KILOMETRES,
            self::AREA_UNIT_ACRES,
            self::AREA_UNIT_HECTARES,
            self::AREA_UNIT_SQUARE_FEET,
            self::AREA_UNIT_SQUAREMETRES,
            self::AREA_UNIT_SQUARE_INCHES,
            self::AREA_UNIT_SQUARE_MILES,
            self::AREA_UNIT_SQUARE_YARDS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVolumeUnitAllowableValues()
    {
        return [
            self::VOLUME_UNIT_LITRES,
            self::VOLUME_UNIT_CUBICMETRES,
            self::VOLUME_UNIT_CUBIC_FEET,
            self::VOLUME_UNIT_GALLONS,
            self::VOLUME_UNIT_OUNCES,
            self::VOLUME_UNIT_GALLONS_US,
            self::VOLUME_UNIT_OUNCES_US,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_KILOGRAMS,
            self::WEIGHT_UNIT_OUNCES,
            self::WEIGHT_UNIT_POUNDS,
            self::WEIGHT_UNIT_TONNES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeUnitAllowableValues()
    {
        return [
            self::TIME_UNIT_H_HMMSS,
            self::TIME_UNIT_HMMSS,
            self::TIME_UNIT_HMMSSA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDateUnitAllowableValues()
    {
        return [
            self::DATE_UNIT_YYYYMMDD1,
            self::DATE_UNIT_YYYYMMDD2,
            self::DATE_UNIT_YYYYMMDD3,
            self::DATE_UNIT_DDMMYYYY1,
            self::DATE_UNIT_DDMMYYYY2,
            self::DATE_UNIT_DDMMYYYY3,
            self::DATE_UNIT_DMYYYY1,
            self::DATE_UNIT_DMYYYY2,
            self::DATE_UNIT_DMYYYY3,
            self::DATE_UNIT_MMDDYYYY1,
            self::DATE_UNIT_MDYYYY1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemperatureUnitAllowableValues()
    {
        return [
            self::TEMPERATURE_UNIT_CELSIUS,
            self::TEMPERATURE_UNIT_FAHRENHEIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distance_unit'] = isset($data['distance_unit']) ? $data['distance_unit'] : null;
        $this->container['altitude_unit'] = isset($data['altitude_unit']) ? $data['altitude_unit'] : null;
        $this->container['speed_unit'] = isset($data['speed_unit']) ? $data['speed_unit'] : null;
        $this->container['area_unit'] = isset($data['area_unit']) ? $data['area_unit'] : null;
        $this->container['volume_unit'] = isset($data['volume_unit']) ? $data['volume_unit'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['time_unit'] = isset($data['time_unit']) ? $data['time_unit'] : null;
        $this->container['date_unit'] = isset($data['date_unit']) ? $data['date_unit'] : null;
        $this->container['temperature_unit'] = isset($data['temperature_unit']) ? $data['temperature_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getDistanceUnitAllowableValues();
        if (!is_null($this->container['distance_unit']) && !in_array($this->container['distance_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'distance_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAltitudeUnitAllowableValues();
        if (!is_null($this->container['altitude_unit']) && !in_array($this->container['altitude_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'altitude_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpeedUnitAllowableValues();
        if (!is_null($this->container['speed_unit']) && !in_array($this->container['speed_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'speed_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAreaUnitAllowableValues();
        if (!is_null($this->container['area_unit']) && !in_array($this->container['area_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'area_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVolumeUnitAllowableValues();
        if (!is_null($this->container['volume_unit']) && !in_array($this->container['volume_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'volume_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!is_null($this->container['weight_unit']) && !in_array($this->container['weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weight_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimeUnitAllowableValues();
        if (!is_null($this->container['time_unit']) && !in_array($this->container['time_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDateUnitAllowableValues();
        if (!is_null($this->container['date_unit']) && !in_array($this->container['date_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'date_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemperatureUnitAllowableValues();
        if (!is_null($this->container['temperature_unit']) && !in_array($this->container['temperature_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'temperature_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distance_unit
     *
     * @return string
     */
    public function getDistanceUnit()
    {
        return $this->container['distance_unit'];
    }

    /**
     * Sets distance_unit
     *
     * @param string $distance_unit distance_unit
     *
     * @return $this
     */
    public function setDistanceUnit($distance_unit)
    {
        $allowedValues = $this->getDistanceUnitAllowableValues();
        if (!is_null($distance_unit) && !in_array($distance_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'distance_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distance_unit'] = $distance_unit;

        return $this;
    }

    /**
     * Gets altitude_unit
     *
     * @return string
     */
    public function getAltitudeUnit()
    {
        return $this->container['altitude_unit'];
    }

    /**
     * Sets altitude_unit
     *
     * @param string $altitude_unit altitude_unit
     *
     * @return $this
     */
    public function setAltitudeUnit($altitude_unit)
    {
        $allowedValues = $this->getAltitudeUnitAllowableValues();
        if (!is_null($altitude_unit) && !in_array($altitude_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'altitude_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['altitude_unit'] = $altitude_unit;

        return $this;
    }

    /**
     * Gets speed_unit
     *
     * @return string
     */
    public function getSpeedUnit()
    {
        return $this->container['speed_unit'];
    }

    /**
     * Sets speed_unit
     *
     * @param string $speed_unit speed_unit
     *
     * @return $this
     */
    public function setSpeedUnit($speed_unit)
    {
        $allowedValues = $this->getSpeedUnitAllowableValues();
        if (!is_null($speed_unit) && !in_array($speed_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'speed_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['speed_unit'] = $speed_unit;

        return $this;
    }

    /**
     * Gets area_unit
     *
     * @return string
     */
    public function getAreaUnit()
    {
        return $this->container['area_unit'];
    }

    /**
     * Sets area_unit
     *
     * @param string $area_unit area_unit
     *
     * @return $this
     */
    public function setAreaUnit($area_unit)
    {
        $allowedValues = $this->getAreaUnitAllowableValues();
        if (!is_null($area_unit) && !in_array($area_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'area_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['area_unit'] = $area_unit;

        return $this;
    }

    /**
     * Gets volume_unit
     *
     * @return string
     */
    public function getVolumeUnit()
    {
        return $this->container['volume_unit'];
    }

    /**
     * Sets volume_unit
     *
     * @param string $volume_unit volume_unit
     *
     * @return $this
     */
    public function setVolumeUnit($volume_unit)
    {
        $allowedValues = $this->getVolumeUnitAllowableValues();
        if (!is_null($volume_unit) && !in_array($volume_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'volume_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['volume_unit'] = $volume_unit;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit weight_unit
     *
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!is_null($weight_unit) && !in_array($weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weight_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets time_unit
     *
     * @return string
     */
    public function getTimeUnit()
    {
        return $this->container['time_unit'];
    }

    /**
     * Sets time_unit
     *
     * @param string $time_unit time_unit
     *
     * @return $this
     */
    public function setTimeUnit($time_unit)
    {
        $allowedValues = $this->getTimeUnitAllowableValues();
        if (!is_null($time_unit) && !in_array($time_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_unit'] = $time_unit;

        return $this;
    }

    /**
     * Gets date_unit
     *
     * @return string
     */
    public function getDateUnit()
    {
        return $this->container['date_unit'];
    }

    /**
     * Sets date_unit
     *
     * @param string $date_unit date_unit
     *
     * @return $this
     */
    public function setDateUnit($date_unit)
    {
        $allowedValues = $this->getDateUnitAllowableValues();
        if (!is_null($date_unit) && !in_array($date_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'date_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['date_unit'] = $date_unit;

        return $this;
    }

    /**
     * Gets temperature_unit
     *
     * @return string
     */
    public function getTemperatureUnit()
    {
        return $this->container['temperature_unit'];
    }

    /**
     * Sets temperature_unit
     *
     * @param string $temperature_unit temperature_unit
     *
     * @return $this
     */
    public function setTemperatureUnit($temperature_unit)
    {
        $allowedValues = $this->getTemperatureUnitAllowableValues();
        if (!is_null($temperature_unit) && !in_array($temperature_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'temperature_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['temperature_unit'] = $temperature_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


