<?php
/**
 * DashboardWidget
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DashboardWidget Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DashboardWidget implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DashboardWidget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inherited' => 'bool',
        'source_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'widget_type' => 'string',
        'options' => '\Swagger\Client\Model\WidgetOptions',
        'hidden' => 'bool',
        'placement' => '\Swagger\Client\Model\DashboardWidgetPlacement',
        'data_source' => '\Swagger\Client\Model\DashboardWidgetDataSource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inherited' => null,
        'source_id' => null,
        'name' => null,
        'description' => null,
        'widget_type' => null,
        'options' => null,
        'hidden' => null,
        'placement' => null,
        'data_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inherited' => 'inherited',
        'source_id' => 'sourceId',
        'name' => 'name',
        'description' => 'description',
        'widget_type' => 'widgetType',
        'options' => 'options',
        'hidden' => 'hidden',
        'placement' => 'placement',
        'data_source' => 'dataSource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inherited' => 'setInherited',
        'source_id' => 'setSourceId',
        'name' => 'setName',
        'description' => 'setDescription',
        'widget_type' => 'setWidgetType',
        'options' => 'setOptions',
        'hidden' => 'setHidden',
        'placement' => 'setPlacement',
        'data_source' => 'setDataSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inherited' => 'getInherited',
        'source_id' => 'getSourceId',
        'name' => 'getName',
        'description' => 'getDescription',
        'widget_type' => 'getWidgetType',
        'options' => 'getOptions',
        'hidden' => 'getHidden',
        'placement' => 'getPlacement',
        'data_source' => 'getDataSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WIDGET_TYPE_CHART = 'chart';
    const WIDGET_TYPE_GRID = 'grid';
    const WIDGET_TYPE_TEXT = 'text';
    const WIDGET_TYPE_STAT = 'stat';
    const WIDGET_TYPE_PIE = 'pie';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWidgetTypeAllowableValues()
    {
        return [
            self::WIDGET_TYPE_CHART,
            self::WIDGET_TYPE_GRID,
            self::WIDGET_TYPE_TEXT,
            self::WIDGET_TYPE_STAT,
            self::WIDGET_TYPE_PIE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inherited'] = isset($data['inherited']) ? $data['inherited'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['widget_type'] = isset($data['widget_type']) ? $data['widget_type'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['placement'] = isset($data['placement']) ? $data['placement'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getWidgetTypeAllowableValues();
        if (!is_null($this->container['widget_type']) && !in_array($this->container['widget_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'widget_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inherited
     *
     * @return bool
     */
    public function getInherited()
    {
        return $this->container['inherited'];
    }

    /**
     * Sets inherited
     *
     * @param bool $inherited Inherited widgets are tied to a parent dashboard and cannot have their `widgetType` or `options` modified, as  they are tracked with the parent dashboard widget.
     *
     * @return $this
     */
    public function setInherited($inherited)
    {
        $this->container['inherited'] = $inherited;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id If a widget was cloned from another widget, the ID of the source widget will be stored here.
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the widget.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A short description of the widget.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets widget_type
     *
     * @return string
     */
    public function getWidgetType()
    {
        return $this->container['widget_type'];
    }

    /**
     * Sets widget_type
     *
     * @param string $widget_type The type of widget
     *
     * @return $this
     */
    public function setWidgetType($widget_type)
    {
        $allowedValues = $this->getWidgetTypeAllowableValues();
        if (!is_null($widget_type) && !in_array($widget_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'widget_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['widget_type'] = $widget_type;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Swagger\Client\Model\WidgetOptions
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Swagger\Client\Model\WidgetOptions $options A number of custom field values for this widget.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Should the widget be displayed on the dashboard or not.
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets placement
     *
     * @return \Swagger\Client\Model\DashboardWidgetPlacement
     */
    public function getPlacement()
    {
        return $this->container['placement'];
    }

    /**
     * Sets placement
     *
     * @param \Swagger\Client\Model\DashboardWidgetPlacement $placement Information about the placement of the widget
     *
     * @return $this
     */
    public function setPlacement($placement)
    {
        $this->container['placement'] = $placement;

        return $this;
    }

    /**
     * Gets data_source
     *
     * @return \Swagger\Client\Model\DashboardWidgetDataSource
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     *
     * @param \Swagger\Client\Model\DashboardWidgetDataSource $data_source Data source information
     *
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


