<?php
/**
 * DeviceBitmapConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceBitmapConfiguration Class Doc Comment
 *
 * @category Class
 * @description The DeviceBitmapConfiguration is used to pick out specific bits from a telemetry value and create a new  telemetry input with the extracted value. target_input &#x3D; (source_input &gt;&gt; bitshift) &amp; bitmask For example, to get the 3rd bit (indexed as 2) as a digital input (0 or 1), you&#39;d specify: target_input &#x3D; (source_input &gt;&gt; 2) &amp; 0x01
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceBitmapConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceBitmapConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'source_input' => 'string',
        'bitshift' => 'double',
        'bitmask' => 'double',
        'target_input' => 'string',
        'target_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'source_input' => null,
        'bitshift' => 'double',
        'bitmask' => 'double',
        'target_input' => null,
        'target_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_input' => 'source_input',
        'bitshift' => 'bitshift',
        'bitmask' => 'bitmask',
        'target_input' => 'target_input',
        'target_type' => 'target_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_input' => 'setSourceInput',
        'bitshift' => 'setBitshift',
        'bitmask' => 'setBitmask',
        'target_input' => 'setTargetInput',
        'target_type' => 'setTargetType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_input' => 'getSourceInput',
        'bitshift' => 'getBitshift',
        'bitmask' => 'getBitmask',
        'target_input' => 'getTargetInput',
        'target_type' => 'getTargetType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TARGET_TYPE_DIGITAL_INPUT = 'digital_input';
    const TARGET_TYPE_DIGITAL_OUTPUT = 'digital_output';
    const TARGET_TYPE_CAN_INPUT = 'can_input';
    const TARGET_TYPE_VALUE_INPUT = 'value_input';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetTypeAllowableValues()
    {
        return [
            self::TARGET_TYPE_DIGITAL_INPUT,
            self::TARGET_TYPE_DIGITAL_OUTPUT,
            self::TARGET_TYPE_CAN_INPUT,
            self::TARGET_TYPE_VALUE_INPUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source_input'] = isset($data['source_input']) ? $data['source_input'] : null;
        $this->container['bitshift'] = isset($data['bitshift']) ? $data['bitshift'] : null;
        $this->container['bitmask'] = isset($data['bitmask']) ? $data['bitmask'] : null;
        $this->container['target_input'] = isset($data['target_input']) ? $data['target_input'] : null;
        $this->container['target_type'] = isset($data['target_type']) ? $data['target_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['source_input'] === null) {
            $invalidProperties[] = "'source_input' can't be null";
        }
        if ($this->container['bitshift'] === null) {
            $invalidProperties[] = "'bitshift' can't be null";
        }
        if ($this->container['bitmask'] === null) {
            $invalidProperties[] = "'bitmask' can't be null";
        }
        if ($this->container['target_input'] === null) {
            $invalidProperties[] = "'target_input' can't be null";
        }
        if ($this->container['target_type'] === null) {
            $invalidProperties[] = "'target_type' can't be null";
        }
        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!is_null($this->container['target_type']) && !in_array($this->container['target_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'target_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_input
     *
     * @return string
     */
    public function getSourceInput()
    {
        return $this->container['source_input'];
    }

    /**
     * Sets source_input
     *
     * @param string $source_input The source input from which to retreive the source value
     *
     * @return $this
     */
    public function setSourceInput($source_input)
    {
        $this->container['source_input'] = $source_input;

        return $this;
    }

    /**
     * Gets bitshift
     *
     * @return double
     */
    public function getBitshift()
    {
        return $this->container['bitshift'];
    }

    /**
     * Sets bitshift
     *
     * @param double $bitshift The number of bits to be shifted right in the source value
     *
     * @return $this
     */
    public function setBitshift($bitshift)
    {
        $this->container['bitshift'] = $bitshift;

        return $this;
    }

    /**
     * Gets bitmask
     *
     * @return double
     */
    public function getBitmask()
    {
        return $this->container['bitmask'];
    }

    /**
     * Sets bitmask
     *
     * @param double $bitmask The bitmask to be applied to after shifting
     *
     * @return $this
     */
    public function setBitmask($bitmask)
    {
        $this->container['bitmask'] = $bitmask;

        return $this;
    }

    /**
     * Gets target_input
     *
     * @return string
     */
    public function getTargetInput()
    {
        return $this->container['target_input'];
    }

    /**
     * Sets target_input
     *
     * @param string $target_input The new input that will store the resulting value
     *
     * @return $this
     */
    public function setTargetInput($target_input)
    {
        $this->container['target_input'] = $target_input;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return string
     */
    public function getTargetType()
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param string $target_type The IO type of the new value
     *
     * @return $this
     */
    public function setTargetType($target_type)
    {
        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!in_array($target_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'target_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target_type'] = $target_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


