<?php
/**
 * DeviceIOParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceIOParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceIOParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceIOParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'digital_input' => '\Swagger\Client\Model\DeviceDigitalConfigDictionary',
        'digital_output' => '\Swagger\Client\Model\DeviceOutputConfigDictionary',
        'analog_input' => '\Swagger\Client\Model\DeviceAnalogConfigDictionary',
        'temperature_input' => '\Swagger\Client\Model\DeviceTemperatureConfigDictionary',
        'can_input' => '\Swagger\Client\Model\DeviceCANConfigDictionary',
        'counter_input' => '\Swagger\Client\Model\DeviceCounterConfigDictionary',
        'camera_input' => '\Swagger\Client\Model\DeviceCameraConfigDictionary',
        'value_input' => '\Swagger\Client\Model\DeviceValueConfigDictionary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'digital_input' => null,
        'digital_output' => null,
        'analog_input' => null,
        'temperature_input' => null,
        'can_input' => null,
        'counter_input' => null,
        'camera_input' => null,
        'value_input' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'digital_input' => 'digital_input',
        'digital_output' => 'digital_output',
        'analog_input' => 'analog_input',
        'temperature_input' => 'temperature_input',
        'can_input' => 'can_input',
        'counter_input' => 'counter_input',
        'camera_input' => 'camera_input',
        'value_input' => 'value_input'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'digital_input' => 'setDigitalInput',
        'digital_output' => 'setDigitalOutput',
        'analog_input' => 'setAnalogInput',
        'temperature_input' => 'setTemperatureInput',
        'can_input' => 'setCanInput',
        'counter_input' => 'setCounterInput',
        'camera_input' => 'setCameraInput',
        'value_input' => 'setValueInput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'digital_input' => 'getDigitalInput',
        'digital_output' => 'getDigitalOutput',
        'analog_input' => 'getAnalogInput',
        'temperature_input' => 'getTemperatureInput',
        'can_input' => 'getCanInput',
        'counter_input' => 'getCounterInput',
        'camera_input' => 'getCameraInput',
        'value_input' => 'getValueInput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['digital_input'] = isset($data['digital_input']) ? $data['digital_input'] : null;
        $this->container['digital_output'] = isset($data['digital_output']) ? $data['digital_output'] : null;
        $this->container['analog_input'] = isset($data['analog_input']) ? $data['analog_input'] : null;
        $this->container['temperature_input'] = isset($data['temperature_input']) ? $data['temperature_input'] : null;
        $this->container['can_input'] = isset($data['can_input']) ? $data['can_input'] : null;
        $this->container['counter_input'] = isset($data['counter_input']) ? $data['counter_input'] : null;
        $this->container['camera_input'] = isset($data['camera_input']) ? $data['camera_input'] : null;
        $this->container['value_input'] = isset($data['value_input']) ? $data['value_input'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets digital_input
     *
     * @return \Swagger\Client\Model\DeviceDigitalConfigDictionary
     */
    public function getDigitalInput()
    {
        return $this->container['digital_input'];
    }

    /**
     * Sets digital_input
     *
     * @param \Swagger\Client\Model\DeviceDigitalConfigDictionary $digital_input Digital input configuration
     *
     * @return $this
     */
    public function setDigitalInput($digital_input)
    {
        $this->container['digital_input'] = $digital_input;

        return $this;
    }

    /**
     * Gets digital_output
     *
     * @return \Swagger\Client\Model\DeviceOutputConfigDictionary
     */
    public function getDigitalOutput()
    {
        return $this->container['digital_output'];
    }

    /**
     * Sets digital_output
     *
     * @param \Swagger\Client\Model\DeviceOutputConfigDictionary $digital_output Digital output configuration
     *
     * @return $this
     */
    public function setDigitalOutput($digital_output)
    {
        $this->container['digital_output'] = $digital_output;

        return $this;
    }

    /**
     * Gets analog_input
     *
     * @return \Swagger\Client\Model\DeviceAnalogConfigDictionary
     */
    public function getAnalogInput()
    {
        return $this->container['analog_input'];
    }

    /**
     * Sets analog_input
     *
     * @param \Swagger\Client\Model\DeviceAnalogConfigDictionary $analog_input Analog input configuration
     *
     * @return $this
     */
    public function setAnalogInput($analog_input)
    {
        $this->container['analog_input'] = $analog_input;

        return $this;
    }

    /**
     * Gets temperature_input
     *
     * @return \Swagger\Client\Model\DeviceTemperatureConfigDictionary
     */
    public function getTemperatureInput()
    {
        return $this->container['temperature_input'];
    }

    /**
     * Sets temperature_input
     *
     * @param \Swagger\Client\Model\DeviceTemperatureConfigDictionary $temperature_input Temperature input configuration
     *
     * @return $this
     */
    public function setTemperatureInput($temperature_input)
    {
        $this->container['temperature_input'] = $temperature_input;

        return $this;
    }

    /**
     * Gets can_input
     *
     * @return \Swagger\Client\Model\DeviceCANConfigDictionary
     */
    public function getCanInput()
    {
        return $this->container['can_input'];
    }

    /**
     * Sets can_input
     *
     * @param \Swagger\Client\Model\DeviceCANConfigDictionary $can_input CAN bus configuration
     *
     * @return $this
     */
    public function setCanInput($can_input)
    {
        $this->container['can_input'] = $can_input;

        return $this;
    }

    /**
     * Gets counter_input
     *
     * @return \Swagger\Client\Model\DeviceCounterConfigDictionary
     */
    public function getCounterInput()
    {
        return $this->container['counter_input'];
    }

    /**
     * Sets counter_input
     *
     * @param \Swagger\Client\Model\DeviceCounterConfigDictionary $counter_input Counter input configuration
     *
     * @return $this
     */
    public function setCounterInput($counter_input)
    {
        $this->container['counter_input'] = $counter_input;

        return $this;
    }

    /**
     * Gets camera_input
     *
     * @return \Swagger\Client\Model\DeviceCameraConfigDictionary
     */
    public function getCameraInput()
    {
        return $this->container['camera_input'];
    }

    /**
     * Sets camera_input
     *
     * @param \Swagger\Client\Model\DeviceCameraConfigDictionary $camera_input Camera configuration
     *
     * @return $this
     */
    public function setCameraInput($camera_input)
    {
        $this->container['camera_input'] = $camera_input;

        return $this;
    }

    /**
     * Gets value_input
     *
     * @return \Swagger\Client\Model\DeviceValueConfigDictionary
     */
    public function getValueInput()
    {
        return $this->container['value_input'];
    }

    /**
     * Sets value_input
     *
     * @param \Swagger\Client\Model\DeviceValueConfigDictionary $value_input Value configuration
     *
     * @return $this
     */
    public function setValueInput($value_input)
    {
        $this->container['value_input'] = $value_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


