<?php
/**
 * DeviceParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_input' => 'string',
        'hours_input' => 'string',
        'idling_input' => 'string',
        'idling_input_invert' => 'bool',
        'io' => '\Swagger\Client\Model\DeviceIOParameters',
        'io_whitelist' => 'string[]',
        'bitmaps' => '\Swagger\Client\Model\DeviceBitmapConfiguration[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_input' => null,
        'hours_input' => null,
        'idling_input' => null,
        'idling_input_invert' => null,
        'io' => null,
        'io_whitelist' => null,
        'bitmaps' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_input' => 'active_input',
        'hours_input' => 'hours_input',
        'idling_input' => 'idling_input',
        'idling_input_invert' => 'idling_input_invert',
        'io' => 'io',
        'io_whitelist' => 'io_whitelist',
        'bitmaps' => 'bitmaps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_input' => 'setActiveInput',
        'hours_input' => 'setHoursInput',
        'idling_input' => 'setIdlingInput',
        'idling_input_invert' => 'setIdlingInputInvert',
        'io' => 'setIo',
        'io_whitelist' => 'setIoWhitelist',
        'bitmaps' => 'setBitmaps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_input' => 'getActiveInput',
        'hours_input' => 'getHoursInput',
        'idling_input' => 'getIdlingInput',
        'idling_input_invert' => 'getIdlingInputInvert',
        'io' => 'getIo',
        'io_whitelist' => 'getIoWhitelist',
        'bitmaps' => 'getBitmaps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_input'] = isset($data['active_input']) ? $data['active_input'] : null;
        $this->container['hours_input'] = isset($data['hours_input']) ? $data['hours_input'] : null;
        $this->container['idling_input'] = isset($data['idling_input']) ? $data['idling_input'] : null;
        $this->container['idling_input_invert'] = isset($data['idling_input_invert']) ? $data['idling_input_invert'] : null;
        $this->container['io'] = isset($data['io']) ? $data['io'] : null;
        $this->container['io_whitelist'] = isset($data['io_whitelist']) ? $data['io_whitelist'] : null;
        $this->container['bitmaps'] = isset($data['bitmaps']) ? $data['bitmaps'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_input
     *
     * @return string
     */
    public function getActiveInput()
    {
        return $this->container['active_input'];
    }

    /**
     * Sets active_input
     *
     * @param string $active_input The input that is used to determine when the device becomes active (ignition on for vehicles). Determines when trips are started and ended.
     *
     * @return $this
     */
    public function setActiveInput($active_input)
    {
        $this->container['active_input'] = $active_input;

        return $this;
    }

    /**
     * Gets hours_input
     *
     * @return string
     */
    public function getHoursInput()
    {
        return $this->container['hours_input'];
    }

    /**
     * Sets hours_input
     *
     * @param string $hours_input The input that is used to start counting engine hours. This is usually the same as 'active_input'.
     *
     * @return $this
     */
    public function setHoursInput($hours_input)
    {
        $this->container['hours_input'] = $hours_input;

        return $this;
    }

    /**
     * Gets idling_input
     *
     * @return string
     */
    public function getIdlingInput()
    {
        return $this->container['idling_input'];
    }

    /**
     * Sets idling_input
     *
     * @param string $idling_input The input that is used to determine when the device is idling. Defaults to \"speed\" where idling is calulated based on device speed.
     *
     * @return $this
     */
    public function setIdlingInput($idling_input)
    {
        $this->container['idling_input'] = $idling_input;

        return $this;
    }

    /**
     * Gets idling_input_invert
     *
     * @return bool
     */
    public function getIdlingInputInvert()
    {
        return $this->container['idling_input_invert'];
    }

    /**
     * Sets idling_input_invert
     *
     * @param bool $idling_input_invert Set to true to invert the input value that is being used for the idling input
     *
     * @return $this
     */
    public function setIdlingInputInvert($idling_input_invert)
    {
        $this->container['idling_input_invert'] = $idling_input_invert;

        return $this;
    }

    /**
     * Gets io
     *
     * @return \Swagger\Client\Model\DeviceIOParameters
     */
    public function getIo()
    {
        return $this->container['io'];
    }

    /**
     * Sets io
     *
     * @param \Swagger\Client\Model\DeviceIOParameters $io Mappings between IoTypes and the device's telemetry inputs and outputs
     *
     * @return $this
     */
    public function setIo($io)
    {
        $this->container['io'] = $io;

        return $this;
    }

    /**
     * Gets io_whitelist
     *
     * @return string[]
     */
    public function getIoWhitelist()
    {
        return $this->container['io_whitelist'];
    }

    /**
     * Sets io_whitelist
     *
     * @param string[] $io_whitelist If this array is populated, only the IOs listed in this array will be persisted in the system, and everything else will be discarded
     *
     * @return $this
     */
    public function setIoWhitelist($io_whitelist)
    {
        $this->container['io_whitelist'] = $io_whitelist;

        return $this;
    }

    /**
     * Gets bitmaps
     *
     * @return \Swagger\Client\Model\DeviceBitmapConfiguration[]
     */
    public function getBitmaps()
    {
        return $this->container['bitmaps'];
    }

    /**
     * Sets bitmaps
     *
     * @param \Swagger\Client\Model\DeviceBitmapConfiguration[] $bitmaps A list of inputs derived using a bitmap operation
     *
     * @return $this
     */
    public function setBitmaps($bitmaps)
    {
        $this->container['bitmaps'] = $bitmaps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


