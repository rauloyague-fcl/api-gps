<?php
/**
 * DeviceTypeUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceTypeUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceTypeUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceTypeUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'short_name' => 'string',
        'parent' => '\Swagger\Client\Model\IdName',
        'tag' => 'string',
        'state' => 'string',
        'device_provider_type' => '\Swagger\Client\Model\IdName',
        'io_capabilities' => '\Swagger\Client\Model\DeviceTypeIOCapabilities',
        'settings_definition' => 'string',
        'accessories' => '\Swagger\Client\Model\DeviceTypeAccessories',
        'features' => '\Swagger\Client\Model\DeviceTypeFeatures'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'short_name' => null,
        'parent' => null,
        'tag' => null,
        'state' => null,
        'device_provider_type' => null,
        'io_capabilities' => null,
        'settings_definition' => null,
        'accessories' => null,
        'features' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'short_name' => 'shortName',
        'parent' => 'parent',
        'tag' => 'tag',
        'state' => 'state',
        'device_provider_type' => 'deviceProviderType',
        'io_capabilities' => 'ioCapabilities',
        'settings_definition' => 'settingsDefinition',
        'accessories' => 'accessories',
        'features' => 'features'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'short_name' => 'setShortName',
        'parent' => 'setParent',
        'tag' => 'setTag',
        'state' => 'setState',
        'device_provider_type' => 'setDeviceProviderType',
        'io_capabilities' => 'setIoCapabilities',
        'settings_definition' => 'setSettingsDefinition',
        'accessories' => 'setAccessories',
        'features' => 'setFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'short_name' => 'getShortName',
        'parent' => 'getParent',
        'tag' => 'getTag',
        'state' => 'getState',
        'device_provider_type' => 'getDeviceProviderType',
        'io_capabilities' => 'getIoCapabilities',
        'settings_definition' => 'getSettingsDefinition',
        'accessories' => 'getAccessories',
        'features' => 'getFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['device_provider_type'] = isset($data['device_provider_type']) ? $data['device_provider_type'] : null;
        $this->container['io_capabilities'] = isset($data['io_capabilities']) ? $data['io_capabilities'] : null;
        $this->container['settings_definition'] = isset($data['settings_definition']) ? $data['settings_definition'] : null;
        $this->container['accessories'] = isset($data['accessories']) ? $data['accessories'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A unique name for this entity
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name A short name for this device type (usually just a model number)
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Swagger\Client\Model\IdName $parent The parent of this entity
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag A unique tag for this entity
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the device type object
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets device_provider_type
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getDeviceProviderType()
    {
        return $this->container['device_provider_type'];
    }

    /**
     * Sets device_provider_type
     *
     * @param \Swagger\Client\Model\IdName $device_provider_type An optional link to a device provider that supplies the data for this device type. If this is set, the user will be  required to select the device provider on device configuration.
     *
     * @return $this
     */
    public function setDeviceProviderType($device_provider_type)
    {
        $this->container['device_provider_type'] = $device_provider_type;

        return $this;
    }

    /**
     * Gets io_capabilities
     *
     * @return \Swagger\Client\Model\DeviceTypeIOCapabilities
     */
    public function getIoCapabilities()
    {
        return $this->container['io_capabilities'];
    }

    /**
     * Sets io_capabilities
     *
     * @param \Swagger\Client\Model\DeviceTypeIOCapabilities $io_capabilities Defines the types of IOs that are available on this device type
     *
     * @return $this
     */
    public function setIoCapabilities($io_capabilities)
    {
        $this->container['io_capabilities'] = $io_capabilities;

        return $this;
    }

    /**
     * Gets settings_definition
     *
     * @return string
     */
    public function getSettingsDefinition()
    {
        return $this->container['settings_definition'];
    }

    /**
     * Sets settings_definition
     *
     * @param string $settings_definition A form definition for custom settings in this device type
     *
     * @return $this
     */
    public function setSettingsDefinition($settings_definition)
    {
        $this->container['settings_definition'] = $settings_definition;

        return $this;
    }

    /**
     * Gets accessories
     *
     * @return \Swagger\Client\Model\DeviceTypeAccessories
     */
    public function getAccessories()
    {
        return $this->container['accessories'];
    }

    /**
     * Sets accessories
     *
     * @param \Swagger\Client\Model\DeviceTypeAccessories $accessories A list of available accessories for this device type
     *
     * @return $this
     */
    public function setAccessories($accessories)
    {
        $this->container['accessories'] = $accessories;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\DeviceTypeFeatures
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\DeviceTypeFeatures $features A map of features for this device type
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


