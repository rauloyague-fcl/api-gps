<?php
/**
 * EventActorFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EventActorFilter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventActorFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventActorFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actor_type' => 'string',
        'actor_type_id' => 'string',
        'actor_type_name' => 'string',
        'actor_selection_type' => 'string',
        'actor_id' => 'string',
        'actor_name' => 'string',
        'text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actor_type' => null,
        'actor_type_id' => null,
        'actor_type_name' => null,
        'actor_selection_type' => null,
        'actor_id' => null,
        'actor_name' => null,
        'text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actor_type' => 'actorType',
        'actor_type_id' => 'actorTypeId',
        'actor_type_name' => 'actorTypeName',
        'actor_selection_type' => 'actorSelectionType',
        'actor_id' => 'actorId',
        'actor_name' => 'actorName',
        'text' => 'text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actor_type' => 'setActorType',
        'actor_type_id' => 'setActorTypeId',
        'actor_type_name' => 'setActorTypeName',
        'actor_selection_type' => 'setActorSelectionType',
        'actor_id' => 'setActorId',
        'actor_name' => 'setActorName',
        'text' => 'setText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actor_type' => 'getActorType',
        'actor_type_id' => 'getActorTypeId',
        'actor_type_name' => 'getActorTypeName',
        'actor_selection_type' => 'getActorSelectionType',
        'actor_id' => 'getActorId',
        'actor_name' => 'getActorName',
        'text' => 'getText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTOR_TYPE_ASSET = 'asset';
    const ACTOR_TYPE_USER = 'user';
    const ACTOR_TYPE_CLIENT = 'client';
    const ACTOR_SELECTION_TYPE_ANY = 'any';
    const ACTOR_SELECTION_TYPE_GROUP = 'group';
    const ACTOR_SELECTION_TYPE_ACCESS_GROUP = 'accessGroup';
    const ACTOR_SELECTION_TYPE_SPECIFIC = 'specific';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActorTypeAllowableValues()
    {
        return [
            self::ACTOR_TYPE_ASSET,
            self::ACTOR_TYPE_USER,
            self::ACTOR_TYPE_CLIENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActorSelectionTypeAllowableValues()
    {
        return [
            self::ACTOR_SELECTION_TYPE_ANY,
            self::ACTOR_SELECTION_TYPE_GROUP,
            self::ACTOR_SELECTION_TYPE_ACCESS_GROUP,
            self::ACTOR_SELECTION_TYPE_SPECIFIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actor_type'] = isset($data['actor_type']) ? $data['actor_type'] : null;
        $this->container['actor_type_id'] = isset($data['actor_type_id']) ? $data['actor_type_id'] : null;
        $this->container['actor_type_name'] = isset($data['actor_type_name']) ? $data['actor_type_name'] : null;
        $this->container['actor_selection_type'] = isset($data['actor_selection_type']) ? $data['actor_selection_type'] : null;
        $this->container['actor_id'] = isset($data['actor_id']) ? $data['actor_id'] : null;
        $this->container['actor_name'] = isset($data['actor_name']) ? $data['actor_name'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['actor_type'] === null) {
            $invalidProperties[] = "'actor_type' can't be null";
        }
        $allowedValues = $this->getActorTypeAllowableValues();
        if (!is_null($this->container['actor_type']) && !in_array($this->container['actor_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actor_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['actor_type_id'] === null) {
            $invalidProperties[] = "'actor_type_id' can't be null";
        }
        if ($this->container['actor_type_name'] === null) {
            $invalidProperties[] = "'actor_type_name' can't be null";
        }
        if ($this->container['actor_selection_type'] === null) {
            $invalidProperties[] = "'actor_selection_type' can't be null";
        }
        $allowedValues = $this->getActorSelectionTypeAllowableValues();
        if (!is_null($this->container['actor_selection_type']) && !in_array($this->container['actor_selection_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actor_selection_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['actor_id'] === null) {
            $invalidProperties[] = "'actor_id' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actor_type
     *
     * @return string
     */
    public function getActorType()
    {
        return $this->container['actor_type'];
    }

    /**
     * Sets actor_type
     *
     * @param string $actor_type actor_type
     *
     * @return $this
     */
    public function setActorType($actor_type)
    {
        $allowedValues = $this->getActorTypeAllowableValues();
        if (!in_array($actor_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actor_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actor_type'] = $actor_type;

        return $this;
    }

    /**
     * Gets actor_type_id
     *
     * @return string
     */
    public function getActorTypeId()
    {
        return $this->container['actor_type_id'];
    }

    /**
     * Sets actor_type_id
     *
     * @param string $actor_type_id actor_type_id
     *
     * @return $this
     */
    public function setActorTypeId($actor_type_id)
    {
        $this->container['actor_type_id'] = $actor_type_id;

        return $this;
    }

    /**
     * Gets actor_type_name
     *
     * @return string
     */
    public function getActorTypeName()
    {
        return $this->container['actor_type_name'];
    }

    /**
     * Sets actor_type_name
     *
     * @param string $actor_type_name actor_type_name
     *
     * @return $this
     */
    public function setActorTypeName($actor_type_name)
    {
        $this->container['actor_type_name'] = $actor_type_name;

        return $this;
    }

    /**
     * Gets actor_selection_type
     *
     * @return string
     */
    public function getActorSelectionType()
    {
        return $this->container['actor_selection_type'];
    }

    /**
     * Sets actor_selection_type
     *
     * @param string $actor_selection_type actor_selection_type
     *
     * @return $this
     */
    public function setActorSelectionType($actor_selection_type)
    {
        $allowedValues = $this->getActorSelectionTypeAllowableValues();
        if (!in_array($actor_selection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actor_selection_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actor_selection_type'] = $actor_selection_type;

        return $this;
    }

    /**
     * Gets actor_id
     *
     * @return string
     */
    public function getActorId()
    {
        return $this->container['actor_id'];
    }

    /**
     * Sets actor_id
     *
     * @param string $actor_id actor_id
     *
     * @return $this
     */
    public function setActorId($actor_id)
    {
        $this->container['actor_id'] = $actor_id;

        return $this;
    }

    /**
     * Gets actor_name
     *
     * @return string
     */
    public function getActorName()
    {
        return $this->container['actor_name'];
    }

    /**
     * Sets actor_name
     *
     * @param string $actor_name actor_name
     *
     * @return $this
     */
    public function setActorName($actor_name)
    {
        $this->container['actor_name'] = $actor_name;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


