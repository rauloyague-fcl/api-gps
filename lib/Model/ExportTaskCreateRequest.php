<?php
/**
 * ExportTaskCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ExportTaskCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExportTaskCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExportTaskCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client' => '\Swagger\Client\Model\IdName',
        'name' => 'string',
        'state' => 'string',
        'delivery_method' => 'string',
        'assets' => '\Swagger\Client\Model\EventActorFilter[]',
        'document_types' => 'string[]',
        'document_version' => 'string',
        'settings' => '\Swagger\Client\Model\Dictionary',
        'owner_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client' => null,
        'name' => null,
        'state' => null,
        'delivery_method' => null,
        'assets' => null,
        'document_types' => null,
        'document_version' => null,
        'settings' => null,
        'owner_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client' => 'client',
        'name' => 'name',
        'state' => 'state',
        'delivery_method' => 'deliveryMethod',
        'assets' => 'assets',
        'document_types' => 'documentTypes',
        'document_version' => 'documentVersion',
        'settings' => 'settings',
        'owner_id' => 'ownerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client' => 'setClient',
        'name' => 'setName',
        'state' => 'setState',
        'delivery_method' => 'setDeliveryMethod',
        'assets' => 'setAssets',
        'document_types' => 'setDocumentTypes',
        'document_version' => 'setDocumentVersion',
        'settings' => 'setSettings',
        'owner_id' => 'setOwnerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client' => 'getClient',
        'name' => 'getName',
        'state' => 'getState',
        'delivery_method' => 'getDeliveryMethod',
        'assets' => 'getAssets',
        'document_types' => 'getDocumentTypes',
        'document_version' => 'getDocumentVersion',
        'settings' => 'getSettings',
        'owner_id' => 'getOwnerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_SUSPENDED = 'suspended';
    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';
    const DELIVERY_METHOD_HTTP = 'http';
    const DELIVERY_METHOD_STREAM = 'stream';
    const DELIVERY_METHOD_FIREHOSE = 'firehose';
    const DOCUMENT_VERSION_V1 = 'v1';
    const DOCUMENT_VERSION_V2 = 'v2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_SUSPENDED,
            self::STATE_ACTIVE,
            self::STATE_DELETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_HTTP,
            self::DELIVERY_METHOD_STREAM,
            self::DELIVERY_METHOD_FIREHOSE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentVersionAllowableValues()
    {
        return [
            self::DOCUMENT_VERSION_V1,
            self::DOCUMENT_VERSION_V2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['delivery_method'] = isset($data['delivery_method']) ? $data['delivery_method'] : null;
        $this->container['assets'] = isset($data['assets']) ? $data['assets'] : null;
        $this->container['document_types'] = isset($data['document_types']) ? $data['document_types'] : null;
        $this->container['document_version'] = isset($data['document_version']) ? $data['document_version'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentVersionAllowableValues();
        if (!is_null($this->container['document_version']) && !in_array($this->container['document_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Swagger\Client\Model\IdName $client The client to export data from. In the case of a Firehose export task, this will be the Vendor and not a client.
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the export task
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the export task
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method The delivery method of the export tasks
     *
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($delivery_method) && !in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \Swagger\Client\Model\EventActorFilter[]
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \Swagger\Client\Model\EventActorFilter[] $assets The filters used to get the assets to be included in the export task
     *
     * @return $this
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets document_types
     *
     * @return string[]
     */
    public function getDocumentTypes()
    {
        return $this->container['document_types'];
    }

    /**
     * Sets document_types
     *
     * @param string[] $document_types The document types to include in the export task
     *
     * @return $this
     */
    public function setDocumentTypes($document_types)
    {
        $this->container['document_types'] = $document_types;

        return $this;
    }

    /**
     * Gets document_version
     *
     * @return string
     */
    public function getDocumentVersion()
    {
        return $this->container['document_version'];
    }

    /**
     * Sets document_version
     *
     * @param string $document_version The document layout version
     *
     * @return $this
     */
    public function setDocumentVersion($document_version)
    {
        $allowedValues = $this->getDocumentVersionAllowableValues();
        if (!is_null($document_version) && !in_array($document_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_version'] = $document_version;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Swagger\Client\Model\Dictionary
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Swagger\Client\Model\Dictionary $settings A set of delivery method specific options
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id The client or vendor that owns this entity
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


