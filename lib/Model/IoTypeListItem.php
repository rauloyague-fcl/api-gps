<?php
/**
 * IoTypeListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IoTypeListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoTypeListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IoTypeListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'owner' => '\Swagger\Client\Model\IdNameType',
        'name' => 'string',
        'state' => 'string',
        'type' => 'string',
        'unit' => 'string',
        'smoothing_type' => 'string',
        'text' => '\Swagger\Client\Model\IoTypeTextConfig',
        'rate' => '\Swagger\Client\Model\IoTypeRateConfig',
        'lookups' => '\Swagger\Client\Model\IdName[]',
        'modified_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'owner' => null,
        'name' => null,
        'state' => null,
        'type' => null,
        'unit' => null,
        'smoothing_type' => null,
        'text' => null,
        'rate' => null,
        'lookups' => null,
        'modified_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'owner' => 'owner',
        'name' => 'name',
        'state' => 'state',
        'type' => 'type',
        'unit' => 'unit',
        'smoothing_type' => 'smoothingType',
        'text' => 'text',
        'rate' => 'rate',
        'lookups' => 'lookups',
        'modified_date' => 'modifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'owner' => 'setOwner',
        'name' => 'setName',
        'state' => 'setState',
        'type' => 'setType',
        'unit' => 'setUnit',
        'smoothing_type' => 'setSmoothingType',
        'text' => 'setText',
        'rate' => 'setRate',
        'lookups' => 'setLookups',
        'modified_date' => 'setModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'owner' => 'getOwner',
        'name' => 'getName',
        'state' => 'getState',
        'type' => 'getType',
        'unit' => 'getUnit',
        'smoothing_type' => 'getSmoothingType',
        'text' => 'getText',
        'rate' => 'getRate',
        'lookups' => 'getLookups',
        'modified_date' => 'getModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';
    const TYPE_DIGITAL_INPUT = 'digital_input';
    const TYPE_DIGITAL_OUTPUT = 'digital_output';
    const TYPE_ANALOG_INPUT = 'analog_input';
    const TYPE_TEMPERATURE_INPUT = 'temperature_input';
    const TYPE_CAN_INPUT = 'can_input';
    const TYPE_COUNTER_INPUT = 'counter_input';
    const TYPE_CAMERA_INPUT = 'camera_input';
    const TYPE_VALUE_INPUT = 'value_input';
    const SMOOTHING_TYPE_NONE = 'none';
    const SMOOTHING_TYPE_MOVING_AVERAGE_5 = 'moving_average_5';
    const SMOOTHING_TYPE_MOVING_AVERAGE_10 = 'moving_average_10';
    const SMOOTHING_TYPE_MOVING_AVERAGE_20 = 'moving_average_20';
    const SMOOTHING_TYPE_MOVING_AVERAGE_50 = 'moving_average_50';
    const SMOOTHING_TYPE_MOVING_AVERAGE_100 = 'moving_average_100';
    const SMOOTHING_TYPE_MOVING_AVERAGE_200 = 'moving_average_200';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DIGITAL_INPUT,
            self::TYPE_DIGITAL_OUTPUT,
            self::TYPE_ANALOG_INPUT,
            self::TYPE_TEMPERATURE_INPUT,
            self::TYPE_CAN_INPUT,
            self::TYPE_COUNTER_INPUT,
            self::TYPE_CAMERA_INPUT,
            self::TYPE_VALUE_INPUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmoothingTypeAllowableValues()
    {
        return [
            self::SMOOTHING_TYPE_NONE,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_5,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_10,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_20,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_50,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_100,
            self::SMOOTHING_TYPE_MOVING_AVERAGE_200,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['smoothing_type'] = isset($data['smoothing_type']) ? $data['smoothing_type'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['lookups'] = isset($data['lookups']) ? $data['lookups'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmoothingTypeAllowableValues();
        if (!is_null($this->container['smoothing_type']) && !in_array($this->container['smoothing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'smoothing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['modified_date'] === null) {
            $invalidProperties[] = "'modified_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique UUID of this entity
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\IdNameType $owner The company entity that owns this entity
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A unique name for this entity
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of this entity
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the IO type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit Optional units that this I/O type is measured in
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets smoothing_type
     *
     * @return string
     */
    public function getSmoothingType()
    {
        return $this->container['smoothing_type'];
    }

    /**
     * Sets smoothing_type
     *
     * @param string $smoothing_type The type of smoothing to apply to this input
     *
     * @return $this
     */
    public function setSmoothingType($smoothing_type)
    {
        $allowedValues = $this->getSmoothingTypeAllowableValues();
        if (!is_null($smoothing_type) && !in_array($smoothing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'smoothing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smoothing_type'] = $smoothing_type;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \Swagger\Client\Model\IoTypeTextConfig
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \Swagger\Client\Model\IoTypeTextConfig $text Digital types can have their value substituted with the following text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return \Swagger\Client\Model\IoTypeRateConfig
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param \Swagger\Client\Model\IoTypeRateConfig $rate An optional rate conversion to do on this value
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets lookups
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getLookups()
    {
        return $this->container['lookups'];
    }

    /**
     * Sets lookups
     *
     * @param \Swagger\Client\Model\IdName[] $lookups A dictionary of lookup values. Only relevant for \"value_input\" types.
     *
     * @return $this
     */
    public function setLookups($lookups)
    {
        $this->container['lookups'] = $lookups;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return string
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param string $modified_date The date the entity was last modified
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


