<?php
/**
 * MapSetLayer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MapSetLayer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MapSetLayer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MapSetLayer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'projection' => 'string',
        'min_zoom' => 'double',
        'max_zoom' => 'double',
        'server_type' => 'string',
        'order' => 'double',
        'image_type' => 'string',
        'layer_name' => 'string',
        'servers' => 'string[]',
        'overlays' => '\Swagger\Client\Model\MapSetLayer[]',
        'attribution' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'projection' => null,
        'min_zoom' => 'double',
        'max_zoom' => 'double',
        'server_type' => null,
        'order' => 'double',
        'image_type' => null,
        'layer_name' => null,
        'servers' => null,
        'overlays' => null,
        'attribution' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'projection' => 'projection',
        'min_zoom' => 'minZoom',
        'max_zoom' => 'maxZoom',
        'server_type' => 'serverType',
        'order' => 'order',
        'image_type' => 'imageType',
        'layer_name' => 'layerName',
        'servers' => 'servers',
        'overlays' => 'overlays',
        'attribution' => 'attribution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'projection' => 'setProjection',
        'min_zoom' => 'setMinZoom',
        'max_zoom' => 'setMaxZoom',
        'server_type' => 'setServerType',
        'order' => 'setOrder',
        'image_type' => 'setImageType',
        'layer_name' => 'setLayerName',
        'servers' => 'setServers',
        'overlays' => 'setOverlays',
        'attribution' => 'setAttribution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'projection' => 'getProjection',
        'min_zoom' => 'getMinZoom',
        'max_zoom' => 'getMaxZoom',
        'server_type' => 'getServerType',
        'order' => 'getOrder',
        'image_type' => 'getImageType',
        'layer_name' => 'getLayerName',
        'servers' => 'getServers',
        'overlays' => 'getOverlays',
        'attribution' => 'getAttribution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVER_TYPE_GOOGLE = 'google';
    const SERVER_TYPE_WMS = 'wms';
    const SERVER_TYPE_OSM = 'osm';
    const SERVER_TYPE_WMTS = 'wmts';
    const SERVER_TYPE_DDS = 'dds';
    const SERVER_TYPE_TMS = 'tms';
    const SERVER_TYPE_MBS = 'mbs';
    const IMAGE_TYPE_PNG = 'png';
    const IMAGE_TYPE_JPG = 'jpg';
    const IMAGE_TYPE_JPEG = 'jpeg';
    const IMAGE_TYPE_GIF = 'gif';
    const IMAGE_TYPE_MVT = 'mvt';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerTypeAllowableValues()
    {
        return [
            self::SERVER_TYPE_GOOGLE,
            self::SERVER_TYPE_WMS,
            self::SERVER_TYPE_OSM,
            self::SERVER_TYPE_WMTS,
            self::SERVER_TYPE_DDS,
            self::SERVER_TYPE_TMS,
            self::SERVER_TYPE_MBS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageTypeAllowableValues()
    {
        return [
            self::IMAGE_TYPE_PNG,
            self::IMAGE_TYPE_JPG,
            self::IMAGE_TYPE_JPEG,
            self::IMAGE_TYPE_GIF,
            self::IMAGE_TYPE_MVT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['projection'] = isset($data['projection']) ? $data['projection'] : null;
        $this->container['min_zoom'] = isset($data['min_zoom']) ? $data['min_zoom'] : null;
        $this->container['max_zoom'] = isset($data['max_zoom']) ? $data['max_zoom'] : null;
        $this->container['server_type'] = isset($data['server_type']) ? $data['server_type'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['image_type'] = isset($data['image_type']) ? $data['image_type'] : null;
        $this->container['layer_name'] = isset($data['layer_name']) ? $data['layer_name'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['overlays'] = isset($data['overlays']) ? $data['overlays'] : null;
        $this->container['attribution'] = isset($data['attribution']) ? $data['attribution'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['projection'] === null) {
            $invalidProperties[] = "'projection' can't be null";
        }
        if ($this->container['min_zoom'] === null) {
            $invalidProperties[] = "'min_zoom' can't be null";
        }
        if ($this->container['max_zoom'] === null) {
            $invalidProperties[] = "'max_zoom' can't be null";
        }
        if ($this->container['server_type'] === null) {
            $invalidProperties[] = "'server_type' can't be null";
        }
        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($this->container['server_type']) && !in_array($this->container['server_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'server_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['image_type'] === null) {
            $invalidProperties[] = "'image_type' can't be null";
        }
        $allowedValues = $this->getImageTypeAllowableValues();
        if (!is_null($this->container['image_type']) && !in_array($this->container['image_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'image_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['layer_name'] === null) {
            $invalidProperties[] = "'layer_name' can't be null";
        }
        if ($this->container['servers'] === null) {
            $invalidProperties[] = "'servers' can't be null";
        }
        if ($this->container['overlays'] === null) {
            $invalidProperties[] = "'overlays' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the map layer
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets projection
     *
     * @return string
     */
    public function getProjection()
    {
        return $this->container['projection'];
    }

    /**
     * Sets projection
     *
     * @param string $projection The projection of the map
     *
     * @return $this
     */
    public function setProjection($projection)
    {
        $this->container['projection'] = $projection;

        return $this;
    }

    /**
     * Gets min_zoom
     *
     * @return double
     */
    public function getMinZoom()
    {
        return $this->container['min_zoom'];
    }

    /**
     * Sets min_zoom
     *
     * @param double $min_zoom The minimum zoom level supported by this map layer
     *
     * @return $this
     */
    public function setMinZoom($min_zoom)
    {
        $this->container['min_zoom'] = $min_zoom;

        return $this;
    }

    /**
     * Gets max_zoom
     *
     * @return double
     */
    public function getMaxZoom()
    {
        return $this->container['max_zoom'];
    }

    /**
     * Sets max_zoom
     *
     * @param double $max_zoom The maximum zoom level supported by this map layer
     *
     * @return $this
     */
    public function setMaxZoom($max_zoom)
    {
        $this->container['max_zoom'] = $max_zoom;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string $server_type The map server type
     *
     * @return $this
     */
    public function setServerType($server_type)
    {
        $allowedValues = $this->getServerTypeAllowableValues();
        if (!in_array($server_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'server_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets order
     *
     * @return double
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param double $order The order of the layer amongst it's peers
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string
     */
    public function getImageType()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string $image_type The image type of the map tiles
     *
     * @return $this
     */
    public function setImageType($image_type)
    {
        $allowedValues = $this->getImageTypeAllowableValues();
        if (!in_array($image_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'image_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets layer_name
     *
     * @return string
     */
    public function getLayerName()
    {
        return $this->container['layer_name'];
    }

    /**
     * Sets layer_name
     *
     * @param string $layer_name The name of the layer to present to the map server
     *
     * @return $this
     */
    public function setLayerName($layer_name)
    {
        $this->container['layer_name'] = $layer_name;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return string[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param string[] $servers A list of map server urls
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets overlays
     *
     * @return \Swagger\Client\Model\MapSetLayer[]
     */
    public function getOverlays()
    {
        return $this->container['overlays'];
    }

    /**
     * Sets overlays
     *
     * @param \Swagger\Client\Model\MapSetLayer[] $overlays An optional list of layers to overlay on this layer
     *
     * @return $this
     */
    public function setOverlays($overlays)
    {
        $this->container['overlays'] = $overlays;

        return $this;
    }

    /**
     * Gets attribution
     *
     * @return string
     */
    public function getAttribution()
    {
        return $this->container['attribution'];
    }

    /**
     * Sets attribution
     *
     * @param string $attribution The source attribution text to overlay on this map layer
     *
     * @return $this
     */
    public function setAttribution($attribution)
    {
        $this->container['attribution'] = $attribution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


