<?php
/**
 * PasswordComplexity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PasswordComplexity Class Doc Comment
 *
 * @category Class
 * @description Defines the expected complexity of user supplied passwords
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PasswordComplexity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PasswordComplexity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mixed_case' => 'bool',
        'alpha_numerical' => 'bool',
        'special_characters' => 'bool',
        'no_common_passwords' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mixed_case' => null,
        'alpha_numerical' => null,
        'special_characters' => null,
        'no_common_passwords' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mixed_case' => 'mixedCase',
        'alpha_numerical' => 'alphaNumerical',
        'special_characters' => 'specialCharacters',
        'no_common_passwords' => 'noCommonPasswords'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mixed_case' => 'setMixedCase',
        'alpha_numerical' => 'setAlphaNumerical',
        'special_characters' => 'setSpecialCharacters',
        'no_common_passwords' => 'setNoCommonPasswords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mixed_case' => 'getMixedCase',
        'alpha_numerical' => 'getAlphaNumerical',
        'special_characters' => 'getSpecialCharacters',
        'no_common_passwords' => 'getNoCommonPasswords'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mixed_case'] = isset($data['mixed_case']) ? $data['mixed_case'] : null;
        $this->container['alpha_numerical'] = isset($data['alpha_numerical']) ? $data['alpha_numerical'] : null;
        $this->container['special_characters'] = isset($data['special_characters']) ? $data['special_characters'] : null;
        $this->container['no_common_passwords'] = isset($data['no_common_passwords']) ? $data['no_common_passwords'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['mixed_case'] === null) {
            $invalidProperties[] = "'mixed_case' can't be null";
        }
        if ($this->container['alpha_numerical'] === null) {
            $invalidProperties[] = "'alpha_numerical' can't be null";
        }
        if ($this->container['special_characters'] === null) {
            $invalidProperties[] = "'special_characters' can't be null";
        }
        if ($this->container['no_common_passwords'] === null) {
            $invalidProperties[] = "'no_common_passwords' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mixed_case
     *
     * @return bool
     */
    public function getMixedCase()
    {
        return $this->container['mixed_case'];
    }

    /**
     * Sets mixed_case
     *
     * @param bool $mixed_case If enabled, forces the user to use both uppercase and lowercase characters in their password.
     *
     * @return $this
     */
    public function setMixedCase($mixed_case)
    {
        $this->container['mixed_case'] = $mixed_case;

        return $this;
    }

    /**
     * Gets alpha_numerical
     *
     * @return bool
     */
    public function getAlphaNumerical()
    {
        return $this->container['alpha_numerical'];
    }

    /**
     * Sets alpha_numerical
     *
     * @param bool $alpha_numerical If enabled, forces users to use both alpha and numerical characters in their password.
     *
     * @return $this
     */
    public function setAlphaNumerical($alpha_numerical)
    {
        $this->container['alpha_numerical'] = $alpha_numerical;

        return $this;
    }

    /**
     * Gets special_characters
     *
     * @return bool
     */
    public function getSpecialCharacters()
    {
        return $this->container['special_characters'];
    }

    /**
     * Sets special_characters
     *
     * @param bool $special_characters If enabled, forces users to use at least once character that is not alphanumberical.
     *
     * @return $this
     */
    public function setSpecialCharacters($special_characters)
    {
        $this->container['special_characters'] = $special_characters;

        return $this;
    }

    /**
     * Gets no_common_passwords
     *
     * @return bool
     */
    public function getNoCommonPasswords()
    {
        return $this->container['no_common_passwords'];
    }

    /**
     * Sets no_common_passwords
     *
     * @param bool $no_common_passwords If enabled, passwords will be compared to a list of the most common passwords found in breaches, and rejected if it matches.
     *
     * @return $this
     */
    public function setNoCommonPasswords($no_common_passwords)
    {
        $this->container['no_common_passwords'] = $no_common_passwords;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


