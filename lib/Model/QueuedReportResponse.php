<?php
/**
 * QueuedReportResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueuedReportResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueuedReportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueuedReportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'owner' => '\Swagger\Client\Model\IdNameType',
        'user' => '\Swagger\Client\Model\IdName',
        'client' => '\Swagger\Client\Model\IdName',
        'name' => 'string',
        'title' => 'string',
        'source' => 'string',
        'status' => 'string',
        'queue_date' => 'string',
        'update_date' => 'string',
        'output_format' => 'string',
        'progress' => 'double',
        'order' => 'double',
        'priority' => 'double',
        'config' => '\Swagger\Client\Model\ReportConfig',
        'triggered_by' => 'string',
        'base_report_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'owner' => null,
        'user' => null,
        'client' => null,
        'name' => null,
        'title' => null,
        'source' => null,
        'status' => null,
        'queue_date' => null,
        'update_date' => null,
        'output_format' => null,
        'progress' => 'double',
        'order' => 'double',
        'priority' => 'double',
        'config' => null,
        'triggered_by' => null,
        'base_report_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'owner' => 'owner',
        'user' => 'user',
        'client' => 'client',
        'name' => 'name',
        'title' => 'title',
        'source' => 'source',
        'status' => 'status',
        'queue_date' => 'queueDate',
        'update_date' => 'updateDate',
        'output_format' => 'outputFormat',
        'progress' => 'progress',
        'order' => 'order',
        'priority' => 'priority',
        'config' => 'config',
        'triggered_by' => 'triggeredBy',
        'base_report_id' => 'baseReportId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'owner' => 'setOwner',
        'user' => 'setUser',
        'client' => 'setClient',
        'name' => 'setName',
        'title' => 'setTitle',
        'source' => 'setSource',
        'status' => 'setStatus',
        'queue_date' => 'setQueueDate',
        'update_date' => 'setUpdateDate',
        'output_format' => 'setOutputFormat',
        'progress' => 'setProgress',
        'order' => 'setOrder',
        'priority' => 'setPriority',
        'config' => 'setConfig',
        'triggered_by' => 'setTriggeredBy',
        'base_report_id' => 'setBaseReportId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'owner' => 'getOwner',
        'user' => 'getUser',
        'client' => 'getClient',
        'name' => 'getName',
        'title' => 'getTitle',
        'source' => 'getSource',
        'status' => 'getStatus',
        'queue_date' => 'getQueueDate',
        'update_date' => 'getUpdateDate',
        'output_format' => 'getOutputFormat',
        'progress' => 'getProgress',
        'order' => 'getOrder',
        'priority' => 'getPriority',
        'config' => 'getConfig',
        'triggered_by' => 'getTriggeredBy',
        'base_report_id' => 'getBaseReportId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCE_DATASET = 'dataset';
    const SOURCE_ANALYTICS = 'analytics';
    const STATUS_QUEUED = 'queued';
    const STATUS_RUNNING = 'running';
    const STATUS_COMPLETED = 'completed';
    const STATUS_ABORTED = 'aborted';
    const STATUS_FAILED = 'failed';
    const STATUS_RETRY = 'retry';
    const OUTPUT_FORMAT_PDF = 'pdf';
    const OUTPUT_FORMAT_XLSX = 'xlsx';
    const OUTPUT_FORMAT_XML = 'xml';
    const OUTPUT_FORMAT_CSV = 'csv';
    const OUTPUT_FORMAT_RAW = 'raw';
    const OUTPUT_FORMAT_JSON = 'json';
    const OUTPUT_FORMAT_RAW_COMPACT = 'raw_compact';
    const OUTPUT_FORMAT_SOURCE = 'source';
    const TRIGGERED_BY_USER = 'user';
    const TRIGGERED_BY_SCHEDULE = 'schedule';
    const TRIGGERED_BY_DASHBOARD = 'dashboard';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_DATASET,
            self::SOURCE_ANALYTICS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_RUNNING,
            self::STATUS_COMPLETED,
            self::STATUS_ABORTED,
            self::STATUS_FAILED,
            self::STATUS_RETRY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutputFormatAllowableValues()
    {
        return [
            self::OUTPUT_FORMAT_PDF,
            self::OUTPUT_FORMAT_XLSX,
            self::OUTPUT_FORMAT_XML,
            self::OUTPUT_FORMAT_CSV,
            self::OUTPUT_FORMAT_RAW,
            self::OUTPUT_FORMAT_JSON,
            self::OUTPUT_FORMAT_RAW_COMPACT,
            self::OUTPUT_FORMAT_SOURCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggeredByAllowableValues()
    {
        return [
            self::TRIGGERED_BY_USER,
            self::TRIGGERED_BY_SCHEDULE,
            self::TRIGGERED_BY_DASHBOARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['queue_date'] = isset($data['queue_date']) ? $data['queue_date'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['output_format'] = isset($data['output_format']) ? $data['output_format'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['triggered_by'] = isset($data['triggered_by']) ? $data['triggered_by'] : null;
        $this->container['base_report_id'] = isset($data['base_report_id']) ? $data['base_report_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['queue_date'] === null) {
            $invalidProperties[] = "'queue_date' can't be null";
        }
        if ($this->container['update_date'] === null) {
            $invalidProperties[] = "'update_date' can't be null";
        }
        if ($this->container['output_format'] === null) {
            $invalidProperties[] = "'output_format' can't be null";
        }
        $allowedValues = $this->getOutputFormatAllowableValues();
        if (!is_null($this->container['output_format']) && !in_array($this->container['output_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'output_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        if ($this->container['triggered_by'] === null) {
            $invalidProperties[] = "'triggered_by' can't be null";
        }
        $allowedValues = $this->getTriggeredByAllowableValues();
        if (!is_null($this->container['triggered_by']) && !in_array($this->container['triggered_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'triggered_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of this report definition
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\IdNameType $owner The entity that owns this report
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\IdName $user The user that queued this report definition
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Swagger\Client\Model\IdName $client The client for which the report was run
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The base report name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The report title as set by the user
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The reporting subsystem that generates this report
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of this report
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets queue_date
     *
     * @return string
     */
    public function getQueueDate()
    {
        return $this->container['queue_date'];
    }

    /**
     * Sets queue_date
     *
     * @param string $queue_date The ISO date/time that this report was queued
     *
     * @return $this
     */
    public function setQueueDate($queue_date)
    {
        $this->container['queue_date'] = $queue_date;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date The ISO date/time that this report's state last changed
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets output_format
     *
     * @return string
     */
    public function getOutputFormat()
    {
        return $this->container['output_format'];
    }

    /**
     * Sets output_format
     *
     * @param string $output_format The output format for this report
     *
     * @return $this
     */
    public function setOutputFormat($output_format)
    {
        $allowedValues = $this->getOutputFormatAllowableValues();
        if (!in_array($output_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'output_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['output_format'] = $output_format;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return double
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param double $progress The progress percentage of this report
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets order
     *
     * @return double
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param double $order report queue order, will change sometimes while queued
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return double
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param double $priority The report priority: 0 = urgent, 1 = high, 2 = normal, 3 = low, 4+ = none (sorted as an integer)
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Swagger\Client\Model\ReportConfig
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Swagger\Client\Model\ReportConfig $config The report configuration
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets triggered_by
     *
     * @return string
     */
    public function getTriggeredBy()
    {
        return $this->container['triggered_by'];
    }

    /**
     * Sets triggered_by
     *
     * @param string $triggered_by What triggered the report
     *
     * @return $this
     */
    public function setTriggeredBy($triggered_by)
    {
        $allowedValues = $this->getTriggeredByAllowableValues();
        if (!in_array($triggered_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'triggered_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggered_by'] = $triggered_by;

        return $this;
    }

    /**
     * Gets base_report_id
     *
     * @return string
     */
    public function getBaseReportId()
    {
        return $this->container['base_report_id'];
    }

    /**
     * Sets base_report_id
     *
     * @param string $base_report_id The UUID of a base report in analytics (if any) this report is linked to
     *
     * @return $this
     */
    public function setBaseReportId($base_report_id)
    {
        $this->container['base_report_id'] = $base_report_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


