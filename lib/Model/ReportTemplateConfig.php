<?php
/**
 * ReportTemplateConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportTemplateConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportTemplateConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportTemplateConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'output_format' => 'string',
        'definition_id' => 'string',
        'style_id' => 'string',
        'parameters' => 'map[string,null]',
        'editable_fields' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'output_format' => null,
        'definition_id' => null,
        'style_id' => null,
        'parameters' => null,
        'editable_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'output_format' => 'outputFormat',
        'definition_id' => 'definitionId',
        'style_id' => 'styleId',
        'parameters' => 'parameters',
        'editable_fields' => 'editableFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'output_format' => 'setOutputFormat',
        'definition_id' => 'setDefinitionId',
        'style_id' => 'setStyleId',
        'parameters' => 'setParameters',
        'editable_fields' => 'setEditableFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'output_format' => 'getOutputFormat',
        'definition_id' => 'getDefinitionId',
        'style_id' => 'getStyleId',
        'parameters' => 'getParameters',
        'editable_fields' => 'getEditableFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OUTPUT_FORMAT_PDF = 'pdf';
    const OUTPUT_FORMAT_XLSX = 'xlsx';
    const OUTPUT_FORMAT_XML = 'xml';
    const OUTPUT_FORMAT_CSV = 'csv';
    const OUTPUT_FORMAT_RAW = 'raw';
    const OUTPUT_FORMAT_JSON = 'json';
    const OUTPUT_FORMAT_RAW_COMPACT = 'raw_compact';
    const OUTPUT_FORMAT_SOURCE = 'source';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutputFormatAllowableValues()
    {
        return [
            self::OUTPUT_FORMAT_PDF,
            self::OUTPUT_FORMAT_XLSX,
            self::OUTPUT_FORMAT_XML,
            self::OUTPUT_FORMAT_CSV,
            self::OUTPUT_FORMAT_RAW,
            self::OUTPUT_FORMAT_JSON,
            self::OUTPUT_FORMAT_RAW_COMPACT,
            self::OUTPUT_FORMAT_SOURCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['output_format'] = isset($data['output_format']) ? $data['output_format'] : null;
        $this->container['definition_id'] = isset($data['definition_id']) ? $data['definition_id'] : null;
        $this->container['style_id'] = isset($data['style_id']) ? $data['style_id'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['editable_fields'] = isset($data['editable_fields']) ? $data['editable_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['output_format'] === null) {
            $invalidProperties[] = "'output_format' can't be null";
        }
        $allowedValues = $this->getOutputFormatAllowableValues();
        if (!is_null($this->container['output_format']) && !in_array($this->container['output_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'output_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['definition_id'] === null) {
            $invalidProperties[] = "'definition_id' can't be null";
        }
        if ($this->container['style_id'] === null) {
            $invalidProperties[] = "'style_id' can't be null";
        }
        if ($this->container['parameters'] === null) {
            $invalidProperties[] = "'parameters' can't be null";
        }
        if ($this->container['editable_fields'] === null) {
            $invalidProperties[] = "'editable_fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets output_format
     *
     * @return string
     */
    public function getOutputFormat()
    {
        return $this->container['output_format'];
    }

    /**
     * Sets output_format
     *
     * @param string $output_format The output format for this report
     *
     * @return $this
     */
    public function setOutputFormat($output_format)
    {
        $allowedValues = $this->getOutputFormatAllowableValues();
        if (!in_array($output_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'output_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['output_format'] = $output_format;

        return $this;
    }

    /**
     * Gets definition_id
     *
     * @return string
     */
    public function getDefinitionId()
    {
        return $this->container['definition_id'];
    }

    /**
     * Sets definition_id
     *
     * @param string $definition_id The ID of the report defininition that was used to create this report
     *
     * @return $this
     */
    public function setDefinitionId($definition_id)
    {
        $this->container['definition_id'] = $definition_id;

        return $this;
    }

    /**
     * Gets style_id
     *
     * @return string
     */
    public function getStyleId()
    {
        return $this->container['style_id'];
    }

    /**
     * Sets style_id
     *
     * @param string $style_id The style of the report that was selected
     *
     * @return $this
     */
    public function setStyleId($style_id)
    {
        $this->container['style_id'] = $style_id;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return map[string,null]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param map[string,null] $parameters The parameters that were passed to the report
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets editable_fields
     *
     * @return string[]
     */
    public function getEditableFields()
    {
        return $this->container['editable_fields'];
    }

    /**
     * Sets editable_fields
     *
     * @param string[] $editable_fields The report fields that should be visible and modifyable by the end user
     *
     * @return $this
     */
    public function setEditableFields($editable_fields)
    {
        $this->container['editable_fields'] = $editable_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


