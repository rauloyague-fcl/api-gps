<?php
/**
 * TelemetryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TelemetryResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TelemetryResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TelemetryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'origin' => '\Swagger\Client\Model\IdName',
        'date' => 'string',
        'received' => 'string',
        'active' => 'bool',
        'linked' => '\Swagger\Client\Model\IdNameType[]',
        'zones' => '\Swagger\Client\Model\IdNameType[]',
        'routes' => '\Swagger\Client\Model\IdName[]',
        'state' => '\Swagger\Client\Model\TelemetryStateDictionary',
        'spd' => '\Swagger\Client\Model\SpeedLimits',
        'location' => '\Swagger\Client\Model\TelemetryLocation',
        'telemetry' => '\Swagger\Client\Model\Dictionary',
        'counters' => '\Swagger\Client\Model\NumberDictionary',
        'io' => '\Swagger\Client\Model\TelemetryIOValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'origin' => null,
        'date' => null,
        'received' => null,
        'active' => null,
        'linked' => null,
        'zones' => null,
        'routes' => null,
        'state' => null,
        'spd' => null,
        'location' => null,
        'telemetry' => null,
        'counters' => null,
        'io' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin' => 'origin',
        'date' => 'date',
        'received' => 'received',
        'active' => 'active',
        'linked' => 'linked',
        'zones' => 'zones',
        'routes' => 'routes',
        'state' => 'state',
        'spd' => 'spd',
        'location' => 'location',
        'telemetry' => 'telemetry',
        'counters' => 'counters',
        'io' => 'io'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin' => 'setOrigin',
        'date' => 'setDate',
        'received' => 'setReceived',
        'active' => 'setActive',
        'linked' => 'setLinked',
        'zones' => 'setZones',
        'routes' => 'setRoutes',
        'state' => 'setState',
        'spd' => 'setSpd',
        'location' => 'setLocation',
        'telemetry' => 'setTelemetry',
        'counters' => 'setCounters',
        'io' => 'setIo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin' => 'getOrigin',
        'date' => 'getDate',
        'received' => 'getReceived',
        'active' => 'getActive',
        'linked' => 'getLinked',
        'zones' => 'getZones',
        'routes' => 'getRoutes',
        'state' => 'getState',
        'spd' => 'getSpd',
        'location' => 'getLocation',
        'telemetry' => 'getTelemetry',
        'counters' => 'getCounters',
        'io' => 'getIo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['received'] = isset($data['received']) ? $data['received'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['linked'] = isset($data['linked']) ? $data['linked'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
        $this->container['routes'] = isset($data['routes']) ? $data['routes'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['spd'] = isset($data['spd']) ? $data['spd'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['telemetry'] = isset($data['telemetry']) ? $data['telemetry'] : null;
        $this->container['counters'] = isset($data['counters']) ? $data['counters'] : null;
        $this->container['io'] = isset($data['io']) ? $data['io'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['received'] === null) {
            $invalidProperties[] = "'received' can't be null";
        }
        if ($this->container['linked'] === null) {
            $invalidProperties[] = "'linked' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Swagger\Client\Model\IdName $origin The device that generated this telemetry message
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The ISO8601 UTC date that the message was generated by the device
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets received
     *
     * @return string
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     *
     * @param string $received The ISO8601 UTC date that the message was received by the system
     *
     * @return $this
     */
    public function setReceived($received)
    {
        $this->container['received'] = $received;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active True if the device is in an active state
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets linked
     *
     * @return \Swagger\Client\Model\IdNameType[]
     */
    public function getLinked()
    {
        return $this->container['linked'];
    }

    /**
     * Sets linked
     *
     * @param \Swagger\Client\Model\IdNameType[] $linked A list of assets linked to this telemetry message
     *
     * @return $this
     */
    public function setLinked($linked)
    {
        $this->container['linked'] = $linked;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return \Swagger\Client\Model\IdNameType[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param \Swagger\Client\Model\IdNameType[] $zones A list of zones which are relevant to this location
     *
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \Swagger\Client\Model\IdName[] $routes A list of routes which are relevant to this location
     *
     * @return $this
     */
    public function setRoutes($routes)
    {
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Swagger\Client\Model\TelemetryStateDictionary
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Swagger\Client\Model\TelemetryStateDictionary $state The relevant asset state for this message
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets spd
     *
     * @return \Swagger\Client\Model\SpeedLimits
     */
    public function getSpd()
    {
        return $this->container['spd'];
    }

    /**
     * Sets spd
     *
     * @param \Swagger\Client\Model\SpeedLimits $spd If road speed is enabled, the speed limit information retrieved from reverse geocoding
     *
     * @return $this
     */
    public function setSpd($spd)
    {
        $this->container['spd'] = $spd;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\TelemetryLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\TelemetryLocation $location The current location where this message was generated
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets telemetry
     *
     * @return \Swagger\Client\Model\Dictionary
     */
    public function getTelemetry()
    {
        return $this->container['telemetry'];
    }

    /**
     * Sets telemetry
     *
     * @param \Swagger\Client\Model\Dictionary $telemetry A list of telemetry states and values for this message
     *
     * @return $this
     */
    public function setTelemetry($telemetry)
    {
        $this->container['telemetry'] = $telemetry;

        return $this;
    }

    /**
     * Gets counters
     *
     * @return \Swagger\Client\Model\NumberDictionary
     */
    public function getCounters()
    {
        return $this->container['counters'];
    }

    /**
     * Sets counters
     *
     * @param \Swagger\Client\Model\NumberDictionary $counters A list of counter values for this message
     *
     * @return $this
     */
    public function setCounters($counters)
    {
        $this->container['counters'] = $counters;

        return $this;
    }

    /**
     * Gets io
     *
     * @return \Swagger\Client\Model\TelemetryIOValues
     */
    public function getIo()
    {
        return $this->container['io'];
    }

    /**
     * Sets io
     *
     * @param \Swagger\Client\Model\TelemetryIOValues $io Parsed IO values for this message
     *
     * @return $this
     */
    public function setIo($io)
    {
        $this->container['io'] = $io;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


