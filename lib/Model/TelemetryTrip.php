<?php
/**
 * TelemetryTrip
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TelemetryTrip Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TelemetryTrip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TelemetryTrip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start' => 'string',
        'start_address' => 'string',
        'start_lon' => 'double',
        'start_lat' => 'double',
        'distance' => 'double',
        'last_lon' => 'double',
        'last_lat' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start' => null,
        'start_address' => null,
        'start_lon' => 'double',
        'start_lat' => 'double',
        'distance' => 'double',
        'last_lon' => 'double',
        'last_lat' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'start_address' => 'startAddress',
        'start_lon' => 'startLon',
        'start_lat' => 'startLat',
        'distance' => 'distance',
        'last_lon' => 'lastLon',
        'last_lat' => 'lastLat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'start_address' => 'setStartAddress',
        'start_lon' => 'setStartLon',
        'start_lat' => 'setStartLat',
        'distance' => 'setDistance',
        'last_lon' => 'setLastLon',
        'last_lat' => 'setLastLat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'start_address' => 'getStartAddress',
        'start_lon' => 'getStartLon',
        'start_lat' => 'getStartLat',
        'distance' => 'getDistance',
        'last_lon' => 'getLastLon',
        'last_lat' => 'getLastLat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['start_address'] = isset($data['start_address']) ? $data['start_address'] : null;
        $this->container['start_lon'] = isset($data['start_lon']) ? $data['start_lon'] : null;
        $this->container['start_lat'] = isset($data['start_lat']) ? $data['start_lat'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['last_lon'] = isset($data['last_lon']) ? $data['last_lon'] : null;
        $this->container['last_lat'] = isset($data['last_lat']) ? $data['last_lat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['start_address'] === null) {
            $invalidProperties[] = "'start_address' can't be null";
        }
        if ($this->container['start_lon'] === null) {
            $invalidProperties[] = "'start_lon' can't be null";
        }
        if ($this->container['start_lat'] === null) {
            $invalidProperties[] = "'start_lat' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['last_lon'] === null) {
            $invalidProperties[] = "'last_lon' can't be null";
        }
        if ($this->container['last_lat'] === null) {
            $invalidProperties[] = "'last_lat' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start
     *
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets start_address
     *
     * @return string
     */
    public function getStartAddress()
    {
        return $this->container['start_address'];
    }

    /**
     * Sets start_address
     *
     * @param string $start_address start_address
     *
     * @return $this
     */
    public function setStartAddress($start_address)
    {
        $this->container['start_address'] = $start_address;

        return $this;
    }

    /**
     * Gets start_lon
     *
     * @return double
     */
    public function getStartLon()
    {
        return $this->container['start_lon'];
    }

    /**
     * Sets start_lon
     *
     * @param double $start_lon start_lon
     *
     * @return $this
     */
    public function setStartLon($start_lon)
    {
        $this->container['start_lon'] = $start_lon;

        return $this;
    }

    /**
     * Gets start_lat
     *
     * @return double
     */
    public function getStartLat()
    {
        return $this->container['start_lat'];
    }

    /**
     * Sets start_lat
     *
     * @param double $start_lat start_lat
     *
     * @return $this
     */
    public function setStartLat($start_lat)
    {
        $this->container['start_lat'] = $start_lat;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param double $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets last_lon
     *
     * @return double
     */
    public function getLastLon()
    {
        return $this->container['last_lon'];
    }

    /**
     * Sets last_lon
     *
     * @param double $last_lon last_lon
     *
     * @return $this
     */
    public function setLastLon($last_lon)
    {
        $this->container['last_lon'] = $last_lon;

        return $this;
    }

    /**
     * Gets last_lat
     *
     * @return double
     */
    public function getLastLat()
    {
        return $this->container['last_lat'];
    }

    /**
     * Sets last_lat
     *
     * @param double $last_lat last_lat
     *
     * @return $this
     */
    public function setLastLat($last_lat)
    {
        $this->container['last_lat'] = $last_lat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


