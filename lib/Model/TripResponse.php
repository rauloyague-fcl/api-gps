<?php
/**
 * TripResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TripResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TripResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TripResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'asset' => '\Swagger\Client\Model\IdName',
        'asset_type' => '\Swagger\Client\Model\IdName',
        'trip_type' => 'string',
        'date_start' => 'string',
        'date_end' => 'string',
        'start' => '\Swagger\Client\Model\TripLocation',
        'end' => '\Swagger\Client\Model\TripLocation',
        'stats' => '\Swagger\Client\Model\TripStats',
        'rating' => '\Swagger\Client\Model\TripRating',
        'records' => 'double',
        'linked_assets' => '\Swagger\Client\Model\IdNameType[]',
        'maxes' => '\Swagger\Client\Model\NumberDictionary',
        'labels' => '\Swagger\Client\Model\LabelValuePayload[]',
        'private' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'asset' => null,
        'asset_type' => null,
        'trip_type' => null,
        'date_start' => null,
        'date_end' => null,
        'start' => null,
        'end' => null,
        'stats' => null,
        'rating' => null,
        'records' => 'double',
        'linked_assets' => null,
        'maxes' => null,
        'labels' => null,
        'private' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'asset' => 'asset',
        'asset_type' => 'assetType',
        'trip_type' => 'tripType',
        'date_start' => 'dateStart',
        'date_end' => 'dateEnd',
        'start' => 'start',
        'end' => 'end',
        'stats' => 'stats',
        'rating' => 'rating',
        'records' => 'records',
        'linked_assets' => 'linkedAssets',
        'maxes' => 'maxes',
        'labels' => 'labels',
        'private' => 'private'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'asset' => 'setAsset',
        'asset_type' => 'setAssetType',
        'trip_type' => 'setTripType',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'start' => 'setStart',
        'end' => 'setEnd',
        'stats' => 'setStats',
        'rating' => 'setRating',
        'records' => 'setRecords',
        'linked_assets' => 'setLinkedAssets',
        'maxes' => 'setMaxes',
        'labels' => 'setLabels',
        'private' => 'setPrivate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'asset' => 'getAsset',
        'asset_type' => 'getAssetType',
        'trip_type' => 'getTripType',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'start' => 'getStart',
        'end' => 'getEnd',
        'stats' => 'getStats',
        'rating' => 'getRating',
        'records' => 'getRecords',
        'linked_assets' => 'getLinkedAssets',
        'maxes' => 'getMaxes',
        'labels' => 'getLabels',
        'private' => 'getPrivate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRIP_TYPE_INACTIVE = 'inactive';
    const TRIP_TYPE_ACTIVE = 'active';
    const TRIP_TYPE_MIXED = 'mixed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTripTypeAllowableValues()
    {
        return [
            self::TRIP_TYPE_INACTIVE,
            self::TRIP_TYPE_ACTIVE,
            self::TRIP_TYPE_MIXED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['asset'] = isset($data['asset']) ? $data['asset'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['trip_type'] = isset($data['trip_type']) ? $data['trip_type'] : null;
        $this->container['date_start'] = isset($data['date_start']) ? $data['date_start'] : null;
        $this->container['date_end'] = isset($data['date_end']) ? $data['date_end'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
        $this->container['linked_assets'] = isset($data['linked_assets']) ? $data['linked_assets'] : null;
        $this->container['maxes'] = isset($data['maxes']) ? $data['maxes'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['asset_type'] === null) {
            $invalidProperties[] = "'asset_type' can't be null";
        }
        if ($this->container['trip_type'] === null) {
            $invalidProperties[] = "'trip_type' can't be null";
        }
        $allowedValues = $this->getTripTypeAllowableValues();
        if (!is_null($this->container['trip_type']) && !in_array($this->container['trip_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trip_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date_start'] === null) {
            $invalidProperties[] = "'date_start' can't be null";
        }
        if ($this->container['date_end'] === null) {
            $invalidProperties[] = "'date_end' can't be null";
        }
        if ($this->container['linked_assets'] === null) {
            $invalidProperties[] = "'linked_assets' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id for this trip
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param \Swagger\Client\Model\IdName $asset The asset that generated this trip
     *
     * @return $this
     */
    public function setAsset($asset)
    {
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param \Swagger\Client\Model\IdName $asset_type The type of this asset
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets trip_type
     *
     * @return string
     */
    public function getTripType()
    {
        return $this->container['trip_type'];
    }

    /**
     * Sets trip_type
     *
     * @param string $trip_type The type of this trip
     *
     * @return $this
     */
    public function setTripType($trip_type)
    {
        $allowedValues = $this->getTripTypeAllowableValues();
        if (!in_array($trip_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trip_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trip_type'] = $trip_type;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return string
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param string $date_start The ISO8601 UTC date that the trip was started
     *
     * @return $this
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     *
     * @return string
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param string $date_end The ISO8601 UTC date that the trip was ended
     *
     * @return $this
     */
    public function setDateEnd($date_end)
    {
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \Swagger\Client\Model\TripLocation
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \Swagger\Client\Model\TripLocation $start The location where the trip started
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \Swagger\Client\Model\TripLocation
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \Swagger\Client\Model\TripLocation $end The location where the trip ended
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Swagger\Client\Model\TripStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Swagger\Client\Model\TripStats $stats Statistics about the trip
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return \Swagger\Client\Model\TripRating
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param \Swagger\Client\Model\TripRating $rating Trip rating information
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets records
     *
     * @return double
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param double $records The number of telemetry records that comprised this trip
     *
     * @return $this
     */
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets linked_assets
     *
     * @return \Swagger\Client\Model\IdNameType[]
     */
    public function getLinkedAssets()
    {
        return $this->container['linked_assets'];
    }

    /**
     * Sets linked_assets
     *
     * @param \Swagger\Client\Model\IdNameType[] $linked_assets Any other assets that were linked to this trip
     *
     * @return $this
     */
    public function setLinkedAssets($linked_assets)
    {
        $this->container['linked_assets'] = $linked_assets;

        return $this;
    }

    /**
     * Gets maxes
     *
     * @return \Swagger\Client\Model\NumberDictionary
     */
    public function getMaxes()
    {
        return $this->container['maxes'];
    }

    /**
     * Sets maxes
     *
     * @param \Swagger\Client\Model\NumberDictionary $maxes Max values for the trip
     *
     * @return $this
     */
    public function setMaxes($maxes)
    {
        $this->container['maxes'] = $maxes;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Swagger\Client\Model\LabelValuePayload[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Swagger\Client\Model\LabelValuePayload[] $labels An optional list of labels assigned to this trip
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Indication of whether this trip is private or not
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


