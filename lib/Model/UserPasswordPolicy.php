<?php
/**
 * UserPasswordPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserPasswordPolicy Class Doc Comment
 *
 * @category Class
 * @description Settings that define the user password policy
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserPasswordPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserPasswordPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'source' => '\Swagger\Client\Model\IdNameType',
        'password_length' => 'double',
        'password_complexity' => '\Swagger\Client\Model\PasswordComplexity',
        'password_expiration_days' => 'double',
        'otp_settings' => '\Swagger\Client\Model\OTPSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'source' => null,
        'password_length' => 'double',
        'password_complexity' => null,
        'password_expiration_days' => 'double',
        'otp_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source' => 'source',
        'password_length' => 'passwordLength',
        'password_complexity' => 'passwordComplexity',
        'password_expiration_days' => 'passwordExpirationDays',
        'otp_settings' => 'otpSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source' => 'setSource',
        'password_length' => 'setPasswordLength',
        'password_complexity' => 'setPasswordComplexity',
        'password_expiration_days' => 'setPasswordExpirationDays',
        'otp_settings' => 'setOtpSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source' => 'getSource',
        'password_length' => 'getPasswordLength',
        'password_complexity' => 'getPasswordComplexity',
        'password_expiration_days' => 'getPasswordExpirationDays',
        'otp_settings' => 'getOtpSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['password_length'] = isset($data['password_length']) ? $data['password_length'] : null;
        $this->container['password_complexity'] = isset($data['password_complexity']) ? $data['password_complexity'] : null;
        $this->container['password_expiration_days'] = isset($data['password_expiration_days']) ? $data['password_expiration_days'] : null;
        $this->container['otp_settings'] = isset($data['otp_settings']) ? $data['otp_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['password_length'] === null) {
            $invalidProperties[] = "'password_length' can't be null";
        }
        if ($this->container['password_complexity'] === null) {
            $invalidProperties[] = "'password_complexity' can't be null";
        }
        if ($this->container['password_expiration_days'] === null) {
            $invalidProperties[] = "'password_expiration_days' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source
     *
     * @return \Swagger\Client\Model\IdNameType
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Swagger\Client\Model\IdNameType $source [READ-ONLY] The entity from which the active password polict settings are being calculated
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets password_length
     *
     * @return double
     */
    public function getPasswordLength()
    {
        return $this->container['password_length'];
    }

    /**
     * Sets password_length
     *
     * @param double $password_length The minimum length allowed for passwords
     *
     * @return $this
     */
    public function setPasswordLength($password_length)
    {
        $this->container['password_length'] = $password_length;

        return $this;
    }

    /**
     * Gets password_complexity
     *
     * @return \Swagger\Client\Model\PasswordComplexity
     */
    public function getPasswordComplexity()
    {
        return $this->container['password_complexity'];
    }

    /**
     * Sets password_complexity
     *
     * @param \Swagger\Client\Model\PasswordComplexity $password_complexity Defines the password complexity rules
     *
     * @return $this
     */
    public function setPasswordComplexity($password_complexity)
    {
        $this->container['password_complexity'] = $password_complexity;

        return $this;
    }

    /**
     * Gets password_expiration_days
     *
     * @return double
     */
    public function getPasswordExpirationDays()
    {
        return $this->container['password_expiration_days'];
    }

    /**
     * Sets password_expiration_days
     *
     * @param double $password_expiration_days Determines when users are prompted to change their password. Set to zero to disable password expiration.
     *
     * @return $this
     */
    public function setPasswordExpirationDays($password_expiration_days)
    {
        $this->container['password_expiration_days'] = $password_expiration_days;

        return $this;
    }

    /**
     * Gets otp_settings
     *
     * @return \Swagger\Client\Model\OTPSettings
     */
    public function getOtpSettings()
    {
        return $this->container['otp_settings'];
    }

    /**
     * Sets otp_settings
     *
     * @param \Swagger\Client\Model\OTPSettings $otp_settings Settings for One Time Password authentication. Set to null to disable OTP requirements
     *
     * @return $this
     */
    public function setOtpSettings($otp_settings)
    {
        $this->container['otp_settings'] = $otp_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


