<?php
/**
 * UserUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleet API Specification
 *
 * Welcome to the Key Telematics Fleet API specification. This document outlines the REST routes and data structures returned by the  API and offers examples of usage.  The API publishes a [swagger](https://swagger.io/) specification that can be used to [generate a client library](https://github.com/swagger-api/swagger-codegen) for your language of choice.   The latest swagger file is available for download from the following link: [https://api.eu1.kt1.io/fleet/v2/swagger.json](https://api.eu1.kt1.io/fleet/v2/swagger.json)
 *
 * OpenAPI spec version: 2.83.0
 * Contact: support@keytelematics.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'email_address' => 'string',
        'mobile' => 'string',
        'time_zone_id' => 'string',
        'language' => 'string',
        'state' => 'string',
        'notify_settings' => '\Swagger\Client\Model\NotificationSettings',
        'default_client' => '\Swagger\Client\Model\IdName',
        'roles' => '\Swagger\Client\Model\IdName[]',
        'cost_centre' => '\Swagger\Client\Model\IdName',
        'oidc_tags' => '\Swagger\Client\Model\OidcTags',
        'permissions' => '\Swagger\Client\Model\UserPermissions',
        'password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'email_address' => null,
        'mobile' => null,
        'time_zone_id' => null,
        'language' => null,
        'state' => null,
        'notify_settings' => null,
        'default_client' => null,
        'roles' => null,
        'cost_centre' => null,
        'oidc_tags' => null,
        'permissions' => null,
        'password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email_address' => 'emailAddress',
        'mobile' => 'mobile',
        'time_zone_id' => 'timeZoneId',
        'language' => 'language',
        'state' => 'state',
        'notify_settings' => 'notifySettings',
        'default_client' => 'defaultClient',
        'roles' => 'roles',
        'cost_centre' => 'costCentre',
        'oidc_tags' => 'oidcTags',
        'permissions' => 'permissions',
        'password' => 'password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email_address' => 'setEmailAddress',
        'mobile' => 'setMobile',
        'time_zone_id' => 'setTimeZoneId',
        'language' => 'setLanguage',
        'state' => 'setState',
        'notify_settings' => 'setNotifySettings',
        'default_client' => 'setDefaultClient',
        'roles' => 'setRoles',
        'cost_centre' => 'setCostCentre',
        'oidc_tags' => 'setOidcTags',
        'permissions' => 'setPermissions',
        'password' => 'setPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email_address' => 'getEmailAddress',
        'mobile' => 'getMobile',
        'time_zone_id' => 'getTimeZoneId',
        'language' => 'getLanguage',
        'state' => 'getState',
        'notify_settings' => 'getNotifySettings',
        'default_client' => 'getDefaultClient',
        'roles' => 'getRoles',
        'cost_centre' => 'getCostCentre',
        'oidc_tags' => 'getOidcTags',
        'permissions' => 'getPermissions',
        'password' => 'getPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_INACTIVE = 'inactive';
    const STATE_ACTIVE = 'active';
    const STATE_SUSPENDED = 'suspended';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INACTIVE,
            self::STATE_ACTIVE,
            self::STATE_SUSPENDED,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['notify_settings'] = isset($data['notify_settings']) ? $data['notify_settings'] : null;
        $this->container['default_client'] = isset($data['default_client']) ? $data['default_client'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['cost_centre'] = isset($data['cost_centre']) ? $data['cost_centre'] : null;
        $this->container['oidc_tags'] = isset($data['oidc_tags']) ? $data['oidc_tags'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The user's email address, used to log into the system
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile An optional mobile number used for SMS notifications
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id The time zone identifier for the user (uses the tz database for timezones, see https://en.wikipedia.org/wiki/Tz_database)
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The language code for this user
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the user object
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets notify_settings
     *
     * @return \Swagger\Client\Model\NotificationSettings
     */
    public function getNotifySettings()
    {
        return $this->container['notify_settings'];
    }

    /**
     * Sets notify_settings
     *
     * @param \Swagger\Client\Model\NotificationSettings $notify_settings notification settings
     *
     * @return $this
     */
    public function setNotifySettings($notify_settings)
    {
        $this->container['notify_settings'] = $notify_settings;

        return $this;
    }

    /**
     * Gets default_client
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getDefaultClient()
    {
        return $this->container['default_client'];
    }

    /**
     * Sets default_client
     *
     * @param \Swagger\Client\Model\IdName $default_client The default client to load for this user
     *
     * @return $this
     */
    public function setDefaultClient($default_client)
    {
        $this->container['default_client'] = $default_client;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Swagger\Client\Model\IdName[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Swagger\Client\Model\IdName[] $roles A list of user roles that apply to this user
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets cost_centre
     *
     * @return \Swagger\Client\Model\IdName
     */
    public function getCostCentre()
    {
        return $this->container['cost_centre'];
    }

    /**
     * Sets cost_centre
     *
     * @param \Swagger\Client\Model\IdName $cost_centre The cost centre that this user belongs to
     *
     * @return $this
     */
    public function setCostCentre($cost_centre)
    {
        $this->container['cost_centre'] = $cost_centre;

        return $this;
    }

    /**
     * Gets oidc_tags
     *
     * @return \Swagger\Client\Model\OidcTags
     */
    public function getOidcTags()
    {
        return $this->container['oidc_tags'];
    }

    /**
     * Sets oidc_tags
     *
     * @param \Swagger\Client\Model\OidcTags $oidc_tags When OpenId Connect is enabled for a client, you need to tie the user to the issuer's internal user ID. Specificy them  in the oidcTags bucket
     *
     * @return $this
     */
    public function setOidcTags($oidc_tags)
    {
        $this->container['oidc_tags'] = $oidc_tags;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Swagger\Client\Model\UserPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Swagger\Client\Model\UserPermissions $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The users password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


